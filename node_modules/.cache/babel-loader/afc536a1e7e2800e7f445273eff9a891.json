{"ast":null,"code":"/**\n * interact.js v1.3.4\n *\n * Copyright (c) 2012-2018 Taye Adeyemi <dev@taye.me>\n * Released under the MIT License.\n * https://raw.github.com/taye/interact.js/master/LICENSE\n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.interact = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) {\n      s(r[o]);\n    }\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      'use strict';\n      /*\n       * In a (windowless) server environment this file exports a factory function\n       * that takes the window to use.\n       *\n       *     var interact = require('interact.js')(windowObject);\n       *\n       * See https://github.com/taye/interact.js/issues/187\n       */\n\n      if (typeof window === 'undefined') {\n        module.exports = function (window) {\n          require('./src/utils/window').init(window);\n\n          return require('./src/index');\n        };\n      } else {\n        module.exports = require('./src/index');\n      }\n    }, {\n      \"./src/index\": 19,\n      \"./src/utils/window\": 52\n    }],\n    2: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var extend = require('./utils/extend.js');\n\n      function fireUntilImmediateStopped(event, listeners) {\n        for (var _i = 0; _i < listeners.length; _i++) {\n          var _ref;\n\n          _ref = listeners[_i];\n          var listener = _ref;\n\n          if (event.immediatePropagationStopped) {\n            break;\n          }\n\n          listener(event);\n        }\n      }\n\n      var Eventable = function () {\n        function Eventable(options) {\n          _classCallCheck(this, Eventable);\n\n          this.options = extend({}, options || {});\n        }\n\n        Eventable.prototype.fire = function fire(event) {\n          var listeners = void 0;\n          var onEvent = 'on' + event.type;\n          var global = this.global; // Interactable#on() listeners\n\n          if (listeners = this[event.type]) {\n            fireUntilImmediateStopped(event, listeners);\n          } // interactable.onevent listener\n\n\n          if (this[onEvent]) {\n            this[onEvent](event);\n          } // interact.on() listeners\n\n\n          if (!event.propagationStopped && global && (listeners = global[event.type])) {\n            fireUntilImmediateStopped(event, listeners);\n          }\n        };\n\n        Eventable.prototype.on = function on(eventType, listener) {\n          // if this type of event was never bound\n          if (this[eventType]) {\n            this[eventType].push(listener);\n          } else {\n            this[eventType] = [listener];\n          }\n        };\n\n        Eventable.prototype.off = function off(eventType, listener) {\n          // if it is an action event type\n          var eventList = this[eventType];\n          var index = eventList ? eventList.indexOf(listener) : -1;\n\n          if (index !== -1) {\n            eventList.splice(index, 1);\n          }\n\n          if (eventList && eventList.length === 0 || !listener) {\n            this[eventType] = undefined;\n          }\n        };\n\n        return Eventable;\n      }();\n\n      module.exports = Eventable;\n    }, {\n      \"./utils/extend.js\": 41\n    }],\n    3: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var extend = require('./utils/extend');\n\n      var getOriginXY = require('./utils/getOriginXY');\n\n      var defaults = require('./defaultOptions');\n\n      var signals = require('./utils/Signals').new();\n\n      var InteractEvent = function () {\n        /** */\n        function InteractEvent(interaction, event, action, phase, element, related) {\n          var preEnd = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n          _classCallCheck(this, InteractEvent);\n\n          var target = interaction.target;\n          var deltaSource = (target && target.options || defaults).deltaSource;\n          var origin = getOriginXY(target, element, action);\n          var starting = phase === 'start';\n          var ending = phase === 'end';\n          var coords = starting ? interaction.startCoords : interaction.curCoords;\n          var prevEvent = interaction.prevEvent;\n          element = element || interaction.element;\n          var page = extend({}, coords.page);\n          var client = extend({}, coords.client);\n          page.x -= origin.x;\n          page.y -= origin.y;\n          client.x -= origin.x;\n          client.y -= origin.y;\n          this.ctrlKey = event.ctrlKey;\n          this.altKey = event.altKey;\n          this.shiftKey = event.shiftKey;\n          this.metaKey = event.metaKey;\n          this.button = event.button;\n          this.buttons = event.buttons;\n          this.target = element;\n          this.currentTarget = element;\n          this.relatedTarget = related || null;\n          this.preEnd = preEnd;\n          this.type = action + (phase || '');\n          this.interaction = interaction;\n          this.interactable = target;\n          this.t0 = starting ? interaction.downTimes[interaction.downTimes.length - 1] : prevEvent.t0;\n          var signalArg = {\n            interaction: interaction,\n            event: event,\n            action: action,\n            phase: phase,\n            element: element,\n            related: related,\n            page: page,\n            client: client,\n            coords: coords,\n            starting: starting,\n            ending: ending,\n            deltaSource: deltaSource,\n            iEvent: this\n          };\n          signals.fire('set-xy', signalArg);\n\n          if (ending) {\n            // use previous coords when ending\n            this.pageX = prevEvent.pageX;\n            this.pageY = prevEvent.pageY;\n            this.clientX = prevEvent.clientX;\n            this.clientY = prevEvent.clientY;\n          } else {\n            this.pageX = page.x;\n            this.pageY = page.y;\n            this.clientX = client.x;\n            this.clientY = client.y;\n          }\n\n          this.x0 = interaction.startCoords.page.x - origin.x;\n          this.y0 = interaction.startCoords.page.y - origin.y;\n          this.clientX0 = interaction.startCoords.client.x - origin.x;\n          this.clientY0 = interaction.startCoords.client.y - origin.y;\n          signals.fire('set-delta', signalArg);\n          this.timeStamp = coords.timeStamp;\n          this.dt = interaction.pointerDelta.timeStamp;\n          this.duration = this.timeStamp - this.t0; // speed and velocity in pixels per second\n\n          this.speed = interaction.pointerDelta[deltaSource].speed;\n          this.velocityX = interaction.pointerDelta[deltaSource].vx;\n          this.velocityY = interaction.pointerDelta[deltaSource].vy;\n          this.swipe = ending || phase === 'inertiastart' ? this.getSwipe() : null;\n          signals.fire('new', signalArg);\n        }\n\n        InteractEvent.prototype.getSwipe = function getSwipe() {\n          var interaction = this.interaction;\n\n          if (interaction.prevEvent.speed < 600 || this.timeStamp - interaction.prevEvent.timeStamp > 150) {\n            return null;\n          }\n\n          var angle = 180 * Math.atan2(interaction.prevEvent.velocityY, interaction.prevEvent.velocityX) / Math.PI;\n          var overlap = 22.5;\n\n          if (angle < 0) {\n            angle += 360;\n          }\n\n          var left = 135 - overlap <= angle && angle < 225 + overlap;\n          var up = 225 - overlap <= angle && angle < 315 + overlap;\n          var right = !left && (315 - overlap <= angle || angle < 45 + overlap);\n          var down = !up && 45 - overlap <= angle && angle < 135 + overlap;\n          return {\n            up: up,\n            down: down,\n            left: left,\n            right: right,\n            angle: angle,\n            speed: interaction.prevEvent.speed,\n            velocity: {\n              x: interaction.prevEvent.velocityX,\n              y: interaction.prevEvent.velocityY\n            }\n          };\n        };\n\n        InteractEvent.prototype.preventDefault = function preventDefault() {};\n        /** */\n\n\n        InteractEvent.prototype.stopImmediatePropagation = function stopImmediatePropagation() {\n          this.immediatePropagationStopped = this.propagationStopped = true;\n        };\n        /** */\n\n\n        InteractEvent.prototype.stopPropagation = function stopPropagation() {\n          this.propagationStopped = true;\n        };\n\n        return InteractEvent;\n      }();\n\n      signals.on('set-delta', function (_ref) {\n        var iEvent = _ref.iEvent,\n            interaction = _ref.interaction,\n            starting = _ref.starting,\n            deltaSource = _ref.deltaSource;\n        var prevEvent = starting ? iEvent : interaction.prevEvent;\n\n        if (deltaSource === 'client') {\n          iEvent.dx = iEvent.clientX - prevEvent.clientX;\n          iEvent.dy = iEvent.clientY - prevEvent.clientY;\n        } else {\n          iEvent.dx = iEvent.pageX - prevEvent.pageX;\n          iEvent.dy = iEvent.pageY - prevEvent.pageY;\n        }\n      });\n      InteractEvent.signals = signals;\n      module.exports = InteractEvent;\n    }, {\n      \"./defaultOptions\": 18,\n      \"./utils/Signals\": 34,\n      \"./utils/extend\": 41,\n      \"./utils/getOriginXY\": 42\n    }],\n    4: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var clone = require('./utils/clone');\n\n      var is = require('./utils/is');\n\n      var events = require('./utils/events');\n\n      var extend = require('./utils/extend');\n\n      var actions = require('./actions/base');\n\n      var scope = require('./scope');\n\n      var Eventable = require('./Eventable');\n\n      var defaults = require('./defaultOptions');\n\n      var signals = require('./utils/Signals').new();\n\n      var _require = require('./utils/domUtils'),\n          getElementRect = _require.getElementRect,\n          nodeContains = _require.nodeContains,\n          trySelector = _require.trySelector,\n          matchesSelector = _require.matchesSelector;\n\n      var _require2 = require('./utils/window'),\n          getWindow = _require2.getWindow;\n\n      var _require3 = require('./utils/arr'),\n          contains = _require3.contains;\n\n      var _require4 = require('./utils/browser'),\n          wheelEvent = _require4.wheelEvent; // all set interactables\n\n\n      scope.interactables = [];\n\n      var Interactable = function () {\n        /** */\n        function Interactable(target, options) {\n          _classCallCheck(this, Interactable);\n\n          options = options || {};\n          this.target = target;\n          this.events = new Eventable();\n          this._context = options.context || scope.document;\n          this._win = getWindow(trySelector(target) ? this._context : target);\n          this._doc = this._win.document;\n          signals.fire('new', {\n            target: target,\n            options: options,\n            interactable: this,\n            win: this._win\n          });\n          scope.addDocument(this._doc, this._win);\n          scope.interactables.push(this);\n          this.set(options);\n        }\n\n        Interactable.prototype.setOnEvents = function setOnEvents(action, phases) {\n          var onAction = 'on' + action;\n\n          if (is.function(phases.onstart)) {\n            this.events[onAction + 'start'] = phases.onstart;\n          }\n\n          if (is.function(phases.onmove)) {\n            this.events[onAction + 'move'] = phases.onmove;\n          }\n\n          if (is.function(phases.onend)) {\n            this.events[onAction + 'end'] = phases.onend;\n          }\n\n          if (is.function(phases.oninertiastart)) {\n            this.events[onAction + 'inertiastart'] = phases.oninertiastart;\n          }\n\n          return this;\n        };\n\n        Interactable.prototype.setPerAction = function setPerAction(action, options) {\n          // for all the default per-action options\n          for (var option in options) {\n            // if this option exists for this action\n            if (option in defaults[action]) {\n              // if the option in the options arg is an object value\n              if (is.object(options[option])) {\n                // duplicate the object and merge\n                this.options[action][option] = clone(this.options[action][option] || {});\n                extend(this.options[action][option], options[option]);\n\n                if (is.object(defaults.perAction[option]) && 'enabled' in defaults.perAction[option]) {\n                  this.options[action][option].enabled = options[option].enabled === false ? false : true;\n                }\n              } else if (is.bool(options[option]) && is.object(defaults.perAction[option])) {\n                this.options[action][option].enabled = options[option];\n              } else if (options[option] !== undefined) {\n                // or if it's not undefined, do a plain assignment\n                this.options[action][option] = options[option];\n              }\n            }\n          }\n        };\n        /**\n         * The default function to get an Interactables bounding rect. Can be\n         * overridden using {@link Interactable.rectChecker}.\n         *\n         * @param {Element} [element] The element to measure.\n         * @return {object} The object's bounding rectangle.\n         */\n\n\n        Interactable.prototype.getRect = function getRect(element) {\n          element = element || this.target;\n\n          if (is.string(this.target) && !is.element(element)) {\n            element = this._context.querySelector(this.target);\n          }\n\n          return getElementRect(element);\n        };\n        /**\n         * Returns or sets the function used to calculate the interactable's\n         * element's rectangle\n         *\n         * @param {function} [checker] A function which returns this Interactable's\n         * bounding rectangle. See {@link Interactable.getRect}\n         * @return {function | object} The checker function or this Interactable\n         */\n\n\n        Interactable.prototype.rectChecker = function rectChecker(checker) {\n          if (is.function(checker)) {\n            this.getRect = checker;\n            return this;\n          }\n\n          if (checker === null) {\n            delete this.options.getRect;\n            return this;\n          }\n\n          return this.getRect;\n        };\n\n        Interactable.prototype._backCompatOption = function _backCompatOption(optionName, newValue) {\n          if (trySelector(newValue) || is.object(newValue)) {\n            this.options[optionName] = newValue;\n\n            for (var _i = 0; _i < actions.names.length; _i++) {\n              var _ref;\n\n              _ref = actions.names[_i];\n              var action = _ref;\n              this.options[action][optionName] = newValue;\n            }\n\n            return this;\n          }\n\n          return this.options[optionName];\n        };\n        /**\n         * Gets or sets the origin of the Interactable's element.  The x and y\n         * of the origin will be subtracted from action event coordinates.\n         *\n         * @param {Element | object | string} [origin] An HTML or SVG Element whose\n         * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n         * or any CSS selector\n         *\n         * @return {object} The current origin or this Interactable\n         */\n\n\n        Interactable.prototype.origin = function origin(newValue) {\n          return this._backCompatOption('origin', newValue);\n        };\n        /**\n         * Returns or sets the mouse coordinate types used to calculate the\n         * movement of the pointer.\n         *\n         * @param {string} [newValue] Use 'client' if you will be scrolling while\n         * interacting; Use 'page' if you want autoScroll to work\n         * @return {string | object} The current deltaSource or this Interactable\n         */\n\n\n        Interactable.prototype.deltaSource = function deltaSource(newValue) {\n          if (newValue === 'page' || newValue === 'client') {\n            this.options.deltaSource = newValue;\n            return this;\n          }\n\n          return this.options.deltaSource;\n        };\n        /**\n         * Gets the selector context Node of the Interactable. The default is\n         * `window.document`.\n         *\n         * @return {Node} The context Node of this Interactable\n         */\n\n\n        Interactable.prototype.context = function context() {\n          return this._context;\n        };\n\n        Interactable.prototype.inContext = function inContext(element) {\n          return this._context === element.ownerDocument || nodeContains(this._context, element);\n        };\n        /**\n         * Calls listeners for the given InteractEvent type bound globally\n         * and directly to this Interactable\n         *\n         * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n         * Interactable\n         * @return {Interactable} this Interactable\n         */\n\n\n        Interactable.prototype.fire = function fire(iEvent) {\n          this.events.fire(iEvent);\n          return this;\n        };\n\n        Interactable.prototype._onOffMultiple = function _onOffMultiple(method, eventType, listener, options) {\n          if (is.string(eventType) && eventType.search(' ') !== -1) {\n            eventType = eventType.trim().split(/ +/);\n          }\n\n          if (is.array(eventType)) {\n            for (var _i2 = 0; _i2 < eventType.length; _i2++) {\n              var _ref2;\n\n              _ref2 = eventType[_i2];\n              var type = _ref2;\n              this[method](type, listener, options);\n            }\n\n            return true;\n          }\n\n          if (is.object(eventType)) {\n            for (var prop in eventType) {\n              this[method](prop, eventType[prop], listener);\n            }\n\n            return true;\n          }\n        };\n        /**\n         * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n         *\n         * @param {string | array | object} eventType  The types of events to listen\n         * for\n         * @param {function} listener   The function event (s)\n         * @param {object | boolean} [options]    options object or useCapture flag\n         * for addEventListener\n         * @return {object} This Interactable\n         */\n\n\n        Interactable.prototype.on = function on(eventType, listener, options) {\n          if (this._onOffMultiple('on', eventType, listener, options)) {\n            return this;\n          }\n\n          if (eventType === 'wheel') {\n            eventType = wheelEvent;\n          }\n\n          if (contains(Interactable.eventTypes, eventType)) {\n            this.events.on(eventType, listener);\n          } // delegated event for selector\n          else if (is.string(this.target)) {\n              events.addDelegate(this.target, this._context, eventType, listener, options);\n            } else {\n              events.add(this.target, eventType, listener, options);\n            }\n\n          return this;\n        };\n        /**\n         * Removes an InteractEvent, pointerEvent or DOM event listener\n         *\n         * @param {string | array | object} eventType The types of events that were\n         * listened for\n         * @param {function} listener The listener function to be removed\n         * @param {object | boolean} [options] options object or useCapture flag for\n         * removeEventListener\n         * @return {object} This Interactable\n         */\n\n\n        Interactable.prototype.off = function off(eventType, listener, options) {\n          if (this._onOffMultiple('off', eventType, listener, options)) {\n            return this;\n          }\n\n          if (eventType === 'wheel') {\n            eventType = wheelEvent;\n          } // if it is an action event type\n\n\n          if (contains(Interactable.eventTypes, eventType)) {\n            this.events.off(eventType, listener);\n          } // delegated event\n          else if (is.string(this.target)) {\n              events.removeDelegate(this.target, this._context, eventType, listener, options);\n            } // remove listener from this Interatable's element\n            else {\n                events.remove(this.target, eventType, listener, options);\n              }\n\n          return this;\n        };\n        /**\n         * Reset the options of this Interactable\n         *\n         * @param {object} options The new settings to apply\n         * @return {object} This Interactable\n         */\n\n\n        Interactable.prototype.set = function set(options) {\n          if (!is.object(options)) {\n            options = {};\n          }\n\n          this.options = clone(defaults.base);\n          var perActions = clone(defaults.perAction);\n\n          for (var actionName in actions.methodDict) {\n            var methodName = actions.methodDict[actionName];\n            this.options[actionName] = clone(defaults[actionName]);\n            this.setPerAction(actionName, perActions);\n            this[methodName](options[actionName]);\n          }\n\n          for (var _i3 = 0; _i3 < Interactable.settingsMethods.length; _i3++) {\n            var _ref3;\n\n            _ref3 = Interactable.settingsMethods[_i3];\n            var setting = _ref3;\n            this.options[setting] = defaults.base[setting];\n\n            if (setting in options) {\n              this[setting](options[setting]);\n            }\n          }\n\n          signals.fire('set', {\n            options: options,\n            interactable: this\n          });\n          return this;\n        };\n        /**\n         * Remove this interactable from the list of interactables and remove it's\n         * action capabilities and event listeners\n         *\n         * @return {interact}\n         */\n\n\n        Interactable.prototype.unset = function unset() {\n          events.remove(this.target, 'all');\n\n          if (is.string(this.target)) {\n            // remove delegated events\n            for (var type in events.delegatedEvents) {\n              var delegated = events.delegatedEvents[type];\n\n              if (delegated.selectors[0] === this.target && delegated.contexts[0] === this._context) {\n                delegated.selectors.splice(0, 1);\n                delegated.contexts.splice(0, 1);\n                delegated.listeners.splice(0, 1); // remove the arrays if they are empty\n\n                if (!delegated.selectors.length) {\n                  delegated[type] = null;\n                }\n              }\n\n              events.remove(this._context, type, events.delegateListener);\n              events.remove(this._context, type, events.delegateUseCapture, true);\n            }\n          } else {\n            events.remove(this, 'all');\n          }\n\n          signals.fire('unset', {\n            interactable: this\n          });\n          scope.interactables.splice(scope.interactables.indexOf(this), 1); // Stop related interactions when an Interactable is unset\n\n          for (var _i4 = 0; _i4 < (scope.interactions || []).length; _i4++) {\n            var _ref4;\n\n            _ref4 = (scope.interactions || [])[_i4];\n            var interaction = _ref4;\n\n            if (interaction.target === this && interaction.interacting() && !interaction._ending) {\n              interaction.stop();\n            }\n          }\n\n          return scope.interact;\n        };\n\n        return Interactable;\n      }();\n\n      scope.interactables.indexOfElement = function indexOfElement(target, context) {\n        context = context || scope.document;\n\n        for (var i = 0; i < this.length; i++) {\n          var interactable = this[i];\n\n          if (interactable.target === target && interactable._context === context) {\n            return i;\n          }\n        }\n\n        return -1;\n      };\n\n      scope.interactables.get = function interactableGet(element, options, dontCheckInContext) {\n        var ret = this[this.indexOfElement(element, options && options.context)];\n        return ret && (is.string(element) || dontCheckInContext || ret.inContext(element)) ? ret : null;\n      };\n\n      scope.interactables.forEachMatch = function (element, callback) {\n        for (var _i5 = 0; _i5 < this.length; _i5++) {\n          var _ref5;\n\n          _ref5 = this[_i5];\n          var interactable = _ref5;\n          var ret = void 0;\n\n          if ((is.string(interactable.target) // target is a selector and the element matches\n          ? is.element(element) && matchesSelector(element, interactable.target) : // target is the element\n          element === interactable.target) && // the element is in context\n          interactable.inContext(element)) {\n            ret = callback(interactable);\n          }\n\n          if (ret !== undefined) {\n            return ret;\n          }\n        }\n      }; // all interact.js eventTypes\n\n\n      Interactable.eventTypes = scope.eventTypes = [];\n      Interactable.signals = signals;\n      Interactable.settingsMethods = ['deltaSource', 'origin', 'preventDefault', 'rectChecker'];\n      module.exports = Interactable;\n    }, {\n      \"./Eventable\": 2,\n      \"./actions/base\": 6,\n      \"./defaultOptions\": 18,\n      \"./scope\": 33,\n      \"./utils/Signals\": 34,\n      \"./utils/arr\": 35,\n      \"./utils/browser\": 36,\n      \"./utils/clone\": 37,\n      \"./utils/domUtils\": 39,\n      \"./utils/events\": 40,\n      \"./utils/extend\": 41,\n      \"./utils/is\": 46,\n      \"./utils/window\": 52\n    }],\n    5: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var scope = require('./scope');\n\n      var utils = require('./utils');\n\n      var events = require('./utils/events');\n\n      var browser = require('./utils/browser');\n\n      var domObjects = require('./utils/domObjects');\n\n      var finder = require('./utils/interactionFinder');\n\n      var signals = require('./utils/Signals').new();\n\n      var listeners = {};\n      var methodNames = ['pointerDown', 'pointerMove', 'pointerUp', 'updatePointer', 'removePointer']; // for ignoring browser's simulated mouse events\n\n      var prevTouchTime = 0; // all active and idle interactions\n\n      scope.interactions = [];\n\n      var Interaction = function () {\n        /** */\n        function Interaction(_ref) {\n          var pointerType = _ref.pointerType;\n\n          _classCallCheck(this, Interaction);\n\n          this.target = null; // current interactable being interacted with\n\n          this.element = null; // the target element of the interactable\n\n          this.prepared = {\n            // action that's ready to be fired on next move event\n            name: null,\n            axis: null,\n            edges: null\n          }; // keep track of added pointers\n\n          this.pointers = [];\n          this.pointerIds = [];\n          this.downTargets = [];\n          this.downTimes = []; // Previous native pointer move event coordinates\n\n          this.prevCoords = {\n            page: {\n              x: 0,\n              y: 0\n            },\n            client: {\n              x: 0,\n              y: 0\n            },\n            timeStamp: 0\n          }; // current native pointer move event coordinates\n\n          this.curCoords = {\n            page: {\n              x: 0,\n              y: 0\n            },\n            client: {\n              x: 0,\n              y: 0\n            },\n            timeStamp: 0\n          }; // Starting InteractEvent pointer coordinates\n\n          this.startCoords = {\n            page: {\n              x: 0,\n              y: 0\n            },\n            client: {\n              x: 0,\n              y: 0\n            },\n            timeStamp: 0\n          }; // Change in coordinates and time of the pointer\n\n          this.pointerDelta = {\n            page: {\n              x: 0,\n              y: 0,\n              vx: 0,\n              vy: 0,\n              speed: 0\n            },\n            client: {\n              x: 0,\n              y: 0,\n              vx: 0,\n              vy: 0,\n              speed: 0\n            },\n            timeStamp: 0\n          };\n          this.downEvent = null; // pointerdown/mousedown/touchstart event\n\n          this.downPointer = {};\n          this._eventTarget = null;\n          this._curEventTarget = null;\n          this.prevEvent = null; // previous action event\n\n          this.pointerIsDown = false;\n          this.pointerWasMoved = false;\n          this._interacting = false;\n          this._ending = false;\n          this.pointerType = pointerType;\n          signals.fire('new', this);\n          scope.interactions.push(this);\n        }\n\n        Interaction.prototype.pointerDown = function pointerDown(pointer, event, eventTarget) {\n          var pointerIndex = this.updatePointer(pointer, event, true);\n          signals.fire('down', {\n            pointer: pointer,\n            event: event,\n            eventTarget: eventTarget,\n            pointerIndex: pointerIndex,\n            interaction: this\n          });\n        };\n        /**\n         * ```js\n         * interact(target)\n         *   .draggable({\n         *     // disable the default drag start by down->move\n         *     manualStart: true\n         *   })\n         *   // start dragging after the user holds the pointer down\n         *   .on('hold', function (event) {\n         *     var interaction = event.interaction;\n         *\n         *     if (!interaction.interacting()) {\n         *       interaction.start({ name: 'drag' },\n         *                         event.interactable,\n         *                         event.currentTarget);\n         *     }\n         * });\n         * ```\n         *\n         * Start an action with the given Interactable and Element as tartgets. The\n         * action must be enabled for the target Interactable and an appropriate\n         * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n         *\n         * Use it with `interactable.<action>able({ manualStart: false })` to always\n         * [start actions manually](https://github.com/taye/interact.js/issues/114)\n         *\n         * @param {object} action   The action to be performed - drag, resize, etc.\n         * @param {Interactable} target  The Interactable to target\n         * @param {Element} element The DOM Element to target\n         * @return {object} interact\n         */\n\n\n        Interaction.prototype.start = function start(action, target, element) {\n          if (this.interacting() || !this.pointerIsDown || this.pointerIds.length < (action.name === 'gesture' ? 2 : 1)) {\n            return;\n          } // if this interaction had been removed after stopping\n          // add it back\n\n\n          if (scope.interactions.indexOf(this) === -1) {\n            scope.interactions.push(this);\n          }\n\n          utils.copyAction(this.prepared, action);\n          this.target = target;\n          this.element = element;\n          signals.fire('action-start', {\n            interaction: this,\n            event: this.downEvent\n          });\n        };\n\n        Interaction.prototype.pointerMove = function pointerMove(pointer, event, eventTarget) {\n          if (!this.simulation) {\n            this.updatePointer(pointer);\n            utils.setCoords(this.curCoords, this.pointers);\n          }\n\n          var duplicateMove = this.curCoords.page.x === this.prevCoords.page.x && this.curCoords.page.y === this.prevCoords.page.y && this.curCoords.client.x === this.prevCoords.client.x && this.curCoords.client.y === this.prevCoords.client.y;\n          var dx = void 0;\n          var dy = void 0; // register movement greater than pointerMoveTolerance\n\n          if (this.pointerIsDown && !this.pointerWasMoved) {\n            dx = this.curCoords.client.x - this.startCoords.client.x;\n            dy = this.curCoords.client.y - this.startCoords.client.y;\n            this.pointerWasMoved = utils.hypot(dx, dy) > Interaction.pointerMoveTolerance;\n          }\n\n          var signalArg = {\n            pointer: pointer,\n            pointerIndex: this.getPointerIndex(pointer),\n            event: event,\n            eventTarget: eventTarget,\n            dx: dx,\n            dy: dy,\n            duplicate: duplicateMove,\n            interaction: this,\n            interactingBeforeMove: this.interacting()\n          };\n\n          if (!duplicateMove) {\n            // set pointer coordinate, time changes and speeds\n            utils.setCoordDeltas(this.pointerDelta, this.prevCoords, this.curCoords);\n          }\n\n          signals.fire('move', signalArg);\n\n          if (!duplicateMove) {\n            // if interacting, fire an 'action-move' signal etc\n            if (this.interacting()) {\n              this.doMove(signalArg);\n            }\n\n            if (this.pointerWasMoved) {\n              utils.copyCoords(this.prevCoords, this.curCoords);\n            }\n          }\n        };\n        /**\n         * ```js\n         * interact(target)\n         *   .draggable(true)\n         *   .on('dragmove', function (event) {\n         *     if (someCondition) {\n         *       // change the snap settings\n         *       event.interactable.draggable({ snap: { targets: [] }});\n         *       // fire another move event with re-calculated snap\n         *       event.interaction.doMove();\n         *     }\n         *   });\n         * ```\n         *\n         * Force a move of the current action at the same coordinates. Useful if\n         * snap/restrict has been changed and you want a movement with the new\n         * settings.\n         */\n\n\n        Interaction.prototype.doMove = function doMove(signalArg) {\n          signalArg = utils.extend({\n            pointer: this.pointers[0],\n            event: this.prevEvent,\n            eventTarget: this._eventTarget,\n            interaction: this\n          }, signalArg || {});\n          signals.fire('before-action-move', signalArg);\n\n          if (!this._dontFireMove) {\n            signals.fire('action-move', signalArg);\n          }\n\n          this._dontFireMove = false;\n        }; // End interact move events and stop auto-scroll unless simulation is running\n\n\n        Interaction.prototype.pointerUp = function pointerUp(pointer, event, eventTarget, curEventTarget) {\n          var pointerIndex = this.getPointerIndex(pointer);\n          signals.fire(/cancel$/i.test(event.type) ? 'cancel' : 'up', {\n            pointer: pointer,\n            pointerIndex: pointerIndex,\n            event: event,\n            eventTarget: eventTarget,\n            curEventTarget: curEventTarget,\n            interaction: this\n          });\n\n          if (!this.simulation) {\n            this.end(event);\n          }\n\n          this.pointerIsDown = false;\n          this.removePointer(pointer, event);\n        };\n        /**\n         * ```js\n         * interact(target)\n         *   .draggable(true)\n         *   .on('move', function (event) {\n         *     if (event.pageX > 1000) {\n         *       // end the current action\n         *       event.interaction.end();\n         *       // stop all further listeners from being called\n         *       event.stopImmediatePropagation();\n         *     }\n         *   });\n         * ```\n         *\n         * Stop the current action and fire an end event. Inertial movement does\n         * not happen.\n         *\n         * @param {PointerEvent} [event]\n         */\n\n\n        Interaction.prototype.end = function end(event) {\n          this._ending = true;\n          event = event || this.prevEvent;\n\n          if (this.interacting()) {\n            signals.fire('action-end', {\n              event: event,\n              interaction: this\n            });\n          }\n\n          this.stop();\n          this._ending = false;\n        };\n\n        Interaction.prototype.currentAction = function currentAction() {\n          return this._interacting ? this.prepared.name : null;\n        };\n\n        Interaction.prototype.interacting = function interacting() {\n          return this._interacting;\n        };\n        /** */\n\n\n        Interaction.prototype.stop = function stop() {\n          signals.fire('stop', {\n            interaction: this\n          });\n\n          if (this._interacting) {\n            signals.fire('stop-active', {\n              interaction: this\n            });\n            signals.fire('stop-' + this.prepared.name, {\n              interaction: this\n            });\n          }\n\n          this.target = this.element = null;\n          this._interacting = false;\n          this.prepared.name = this.prevEvent = null;\n        };\n\n        Interaction.prototype.getPointerIndex = function getPointerIndex(pointer) {\n          // mouse and pen interactions may have only one pointer\n          if (this.pointerType === 'mouse' || this.pointerType === 'pen') {\n            return 0;\n          }\n\n          return this.pointerIds.indexOf(utils.getPointerId(pointer));\n        };\n\n        Interaction.prototype.updatePointer = function updatePointer(pointer, event) {\n          var down = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : event && /(down|start)$/i.test(event.type);\n          var id = utils.getPointerId(pointer);\n          var index = this.getPointerIndex(pointer);\n\n          if (index === -1) {\n            index = this.pointerIds.length;\n            this.pointerIds[index] = id;\n          }\n\n          if (down) {\n            signals.fire('update-pointer-down', {\n              pointer: pointer,\n              event: event,\n              down: down,\n              pointerId: id,\n              pointerIndex: index,\n              interaction: this\n            });\n          }\n\n          this.pointers[index] = pointer;\n          return index;\n        };\n\n        Interaction.prototype.removePointer = function removePointer(pointer, event) {\n          var index = this.getPointerIndex(pointer);\n\n          if (index === -1) {\n            return;\n          }\n\n          signals.fire('remove-pointer', {\n            pointer: pointer,\n            event: event,\n            pointerIndex: index,\n            interaction: this\n          });\n          this.pointers.splice(index, 1);\n          this.pointerIds.splice(index, 1);\n          this.downTargets.splice(index, 1);\n          this.downTimes.splice(index, 1);\n        };\n\n        Interaction.prototype._updateEventTargets = function _updateEventTargets(target, currentTarget) {\n          this._eventTarget = target;\n          this._curEventTarget = currentTarget;\n        };\n\n        return Interaction;\n      }();\n\n      for (var _i = 0; _i < methodNames.length; _i++) {\n        var method = methodNames[_i];\n        listeners[method] = doOnInteractions(method);\n      }\n\n      function doOnInteractions(method) {\n        return function (event) {\n          var pointerType = utils.getPointerType(event);\n\n          var _utils$getEventTarget = utils.getEventTargets(event),\n              eventTarget = _utils$getEventTarget[0],\n              curEventTarget = _utils$getEventTarget[1];\n\n          var matches = []; // [ [pointer, interaction], ...]\n\n          if (browser.supportsTouch && /touch/.test(event.type)) {\n            prevTouchTime = new Date().getTime();\n\n            for (var _i2 = 0; _i2 < event.changedTouches.length; _i2++) {\n              var _ref2;\n\n              _ref2 = event.changedTouches[_i2];\n              var changedTouch = _ref2;\n              var pointer = changedTouch;\n              var interaction = finder.search(pointer, event.type, eventTarget);\n              matches.push([pointer, interaction || new Interaction({\n                pointerType: pointerType\n              })]);\n            }\n          } else {\n            var invalidPointer = false;\n\n            if (!browser.supportsPointerEvent && /mouse/.test(event.type)) {\n              // ignore mouse events while touch interactions are active\n              for (var i = 0; i < scope.interactions.length && !invalidPointer; i++) {\n                invalidPointer = scope.interactions[i].pointerType !== 'mouse' && scope.interactions[i].pointerIsDown;\n              } // try to ignore mouse events that are simulated by the browser\n              // after a touch event\n\n\n              invalidPointer = invalidPointer || new Date().getTime() - prevTouchTime < 500 // on iOS and Firefox Mobile, MouseEvent.timeStamp is zero if simulated\n              || event.timeStamp === 0;\n            }\n\n            if (!invalidPointer) {\n              var _interaction = finder.search(event, event.type, eventTarget);\n\n              if (!_interaction) {\n                _interaction = new Interaction({\n                  pointerType: pointerType\n                });\n              }\n\n              matches.push([event, _interaction]);\n            }\n          }\n\n          for (var _i3 = 0; _i3 < matches.length; _i3++) {\n            var _ref3 = matches[_i3];\n            var _pointer = _ref3[0];\n            var _interaction2 = _ref3[1];\n\n            _interaction2._updateEventTargets(eventTarget, curEventTarget);\n\n            _interaction2[method](_pointer, event, eventTarget, curEventTarget);\n          }\n        };\n      }\n\n      function endAll(event) {\n        for (var _i4 = 0; _i4 < scope.interactions.length; _i4++) {\n          var _ref4;\n\n          _ref4 = scope.interactions[_i4];\n          var interaction = _ref4;\n          interaction.end(event);\n          signals.fire('endall', {\n            event: event,\n            interaction: interaction\n          });\n        }\n      }\n\n      var docEvents = {\n        /* 'eventType': listenerFunc */\n      };\n      var pEventTypes = browser.pEventTypes;\n\n      if (domObjects.PointerEvent) {\n        docEvents[pEventTypes.down] = listeners.pointerDown;\n        docEvents[pEventTypes.move] = listeners.pointerMove;\n        docEvents[pEventTypes.up] = listeners.pointerUp;\n        docEvents[pEventTypes.cancel] = listeners.pointerUp;\n      } else {\n        docEvents.mousedown = listeners.pointerDown;\n        docEvents.mousemove = listeners.pointerMove;\n        docEvents.mouseup = listeners.pointerUp;\n        docEvents.touchstart = listeners.pointerDown;\n        docEvents.touchmove = listeners.pointerMove;\n        docEvents.touchend = listeners.pointerUp;\n        docEvents.touchcancel = listeners.pointerUp;\n      }\n\n      docEvents.blur = endAll;\n\n      function onDocSignal(_ref5, signalName) {\n        var doc = _ref5.doc;\n        var eventMethod = signalName.indexOf('add') === 0 ? events.add : events.remove; // delegate event listener\n\n        for (var eventType in scope.delegatedEvents) {\n          eventMethod(doc, eventType, events.delegateListener);\n          eventMethod(doc, eventType, events.delegateUseCapture, true);\n        }\n\n        for (var _eventType in docEvents) {\n          eventMethod(doc, _eventType, docEvents[_eventType], browser.isIOS ? {\n            passive: false\n          } : undefined);\n        }\n      }\n\n      signals.on('update-pointer-down', function (_ref6) {\n        var interaction = _ref6.interaction,\n            pointer = _ref6.pointer,\n            pointerId = _ref6.pointerId,\n            pointerIndex = _ref6.pointerIndex,\n            event = _ref6.event,\n            eventTarget = _ref6.eventTarget,\n            down = _ref6.down;\n        interaction.pointerIds[pointerIndex] = pointerId;\n        interaction.pointers[pointerIndex] = pointer;\n\n        if (down) {\n          interaction.pointerIsDown = true;\n        }\n\n        if (!interaction.interacting()) {\n          utils.setCoords(interaction.startCoords, interaction.pointers);\n          utils.copyCoords(interaction.curCoords, interaction.startCoords);\n          utils.copyCoords(interaction.prevCoords, interaction.startCoords);\n          interaction.downEvent = event;\n          interaction.downTimes[pointerIndex] = interaction.curCoords.timeStamp;\n          interaction.downTargets[pointerIndex] = eventTarget || event && utils.getEventTargets(event)[0];\n          interaction.pointerWasMoved = false;\n          utils.pointerExtend(interaction.downPointer, pointer);\n        }\n      });\n      scope.signals.on('add-document', onDocSignal);\n      scope.signals.on('remove-document', onDocSignal);\n      Interaction.pointerMoveTolerance = 1;\n      Interaction.doOnInteractions = doOnInteractions;\n      Interaction.endAll = endAll;\n      Interaction.signals = signals;\n      Interaction.docEvents = docEvents;\n      scope.endAllInteractions = endAll;\n      module.exports = Interaction;\n    }, {\n      \"./scope\": 33,\n      \"./utils\": 44,\n      \"./utils/Signals\": 34,\n      \"./utils/browser\": 36,\n      \"./utils/domObjects\": 38,\n      \"./utils/events\": 40,\n      \"./utils/interactionFinder\": 45\n    }],\n    6: [function (require, module, exports) {\n      'use strict';\n\n      var Interaction = require('../Interaction');\n\n      var InteractEvent = require('../InteractEvent');\n\n      var actions = {\n        firePrepared: firePrepared,\n        names: [],\n        methodDict: {}\n      };\n      Interaction.signals.on('action-start', function (_ref) {\n        var interaction = _ref.interaction,\n            event = _ref.event;\n        interaction._interacting = true;\n        firePrepared(interaction, event, 'start');\n      });\n      Interaction.signals.on('action-move', function (_ref2) {\n        var interaction = _ref2.interaction,\n            event = _ref2.event,\n            preEnd = _ref2.preEnd;\n        firePrepared(interaction, event, 'move', preEnd); // if the action was ended in a listener\n\n        if (!interaction.interacting()) {\n          return false;\n        }\n      });\n      Interaction.signals.on('action-end', function (_ref3) {\n        var interaction = _ref3.interaction,\n            event = _ref3.event;\n        firePrepared(interaction, event, 'end');\n      });\n\n      function firePrepared(interaction, event, phase, preEnd) {\n        var actionName = interaction.prepared.name;\n        var newEvent = new InteractEvent(interaction, event, actionName, phase, interaction.element, null, preEnd);\n        interaction.target.fire(newEvent);\n        interaction.prevEvent = newEvent;\n      }\n\n      module.exports = actions;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interaction\": 5\n    }],\n    7: [function (require, module, exports) {\n      'use strict';\n\n      var actions = require('./base');\n\n      var utils = require('../utils');\n\n      var InteractEvent = require('../InteractEvent');\n      /** @lends Interactable */\n\n\n      var Interactable = require('../Interactable');\n\n      var Interaction = require('../Interaction');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var drag = {\n        defaults: {\n          enabled: false,\n          mouseButtons: null,\n          origin: null,\n          snap: null,\n          restrict: null,\n          inertia: null,\n          autoScroll: null,\n          startAxis: 'xy',\n          lockAxis: 'xy'\n        },\n        checker: function checker(pointer, event, interactable) {\n          var dragOptions = interactable.options.drag;\n          return dragOptions.enabled ? {\n            name: 'drag',\n            axis: dragOptions.lockAxis === 'start' ? dragOptions.startAxis : dragOptions.lockAxis\n          } : null;\n        },\n        getCursor: function getCursor() {\n          return 'move';\n        }\n      };\n      Interaction.signals.on('before-action-move', function (_ref) {\n        var interaction = _ref.interaction;\n\n        if (interaction.prepared.name !== 'drag') {\n          return;\n        }\n\n        var axis = interaction.prepared.axis;\n\n        if (axis === 'x') {\n          interaction.curCoords.page.y = interaction.startCoords.page.y;\n          interaction.curCoords.client.y = interaction.startCoords.client.y;\n          interaction.pointerDelta.page.speed = Math.abs(interaction.pointerDelta.page.vx);\n          interaction.pointerDelta.client.speed = Math.abs(interaction.pointerDelta.client.vx);\n          interaction.pointerDelta.client.vy = 0;\n          interaction.pointerDelta.page.vy = 0;\n        } else if (axis === 'y') {\n          interaction.curCoords.page.x = interaction.startCoords.page.x;\n          interaction.curCoords.client.x = interaction.startCoords.client.x;\n          interaction.pointerDelta.page.speed = Math.abs(interaction.pointerDelta.page.vy);\n          interaction.pointerDelta.client.speed = Math.abs(interaction.pointerDelta.client.vy);\n          interaction.pointerDelta.client.vx = 0;\n          interaction.pointerDelta.page.vx = 0;\n        }\n      }); // dragmove\n\n      InteractEvent.signals.on('new', function (_ref2) {\n        var iEvent = _ref2.iEvent,\n            interaction = _ref2.interaction;\n\n        if (iEvent.type !== 'dragmove') {\n          return;\n        }\n\n        var axis = interaction.prepared.axis;\n\n        if (axis === 'x') {\n          iEvent.pageY = interaction.startCoords.page.y;\n          iEvent.clientY = interaction.startCoords.client.y;\n          iEvent.dy = 0;\n        } else if (axis === 'y') {\n          iEvent.pageX = interaction.startCoords.page.x;\n          iEvent.clientX = interaction.startCoords.client.x;\n          iEvent.dx = 0;\n        }\n      });\n      /**\n       * ```js\n       * interact(element).draggable({\n       *     onstart: function (event) {},\n       *     onmove : function (event) {},\n       *     onend  : function (event) {},\n       *\n       *     // the axis in which the first movement must be\n       *     // for the drag sequence to start\n       *     // 'xy' by default - any direction\n       *     startAxis: 'x' || 'y' || 'xy',\n       *\n       *     // 'xy' by default - don't restrict to one axis (move in any direction)\n       *     // 'x' or 'y' to restrict movement to either axis\n       *     // 'start' to restrict movement to the axis the drag started in\n       *     lockAxis: 'x' || 'y' || 'xy' || 'start',\n       *\n       *     // max number of drags that can happen concurrently\n       *     // with elements of this Interactable. Infinity by default\n       *     max: Infinity,\n       *\n       *     // max number of drags that can target the same element+Interactable\n       *     // 1 by default\n       *     maxPerElement: 2\n       * });\n       *\n       * var isDraggable = interact('element').draggable(); // true\n       * ```\n       *\n       * Get or set whether drag actions can be performed on the target\n       *\n       * @param {boolean | object} [options] true/false or An object with event\n       * listeners to be fired on drag events (object makes the Interactable\n       * draggable)\n       * @return {boolean | Interactable} boolean indicating if this can be the\n       * target of drag events, or this Interctable\n       */\n\n      Interactable.prototype.draggable = function (options) {\n        if (utils.is.object(options)) {\n          this.options.drag.enabled = options.enabled === false ? false : true;\n          this.setPerAction('drag', options);\n          this.setOnEvents('drag', options);\n\n          if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\n            this.options.drag.lockAxis = options.lockAxis;\n          }\n\n          if (/^(xy|x|y)$/.test(options.startAxis)) {\n            this.options.drag.startAxis = options.startAxis;\n          }\n\n          return this;\n        }\n\n        if (utils.is.bool(options)) {\n          this.options.drag.enabled = options;\n\n          if (!options) {\n            this.ondragstart = this.ondragstart = this.ondragend = null;\n          }\n\n          return this;\n        }\n\n        return this.options.drag;\n      };\n\n      actions.drag = drag;\n      actions.names.push('drag');\n      utils.merge(Interactable.eventTypes, ['dragstart', 'dragmove', 'draginertiastart', 'draginertiaresume', 'dragend']);\n      actions.methodDict.drag = 'draggable';\n      defaultOptions.drag = drag.defaults;\n      module.exports = drag;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interactable\": 4,\n      \"../Interaction\": 5,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"./base\": 6\n    }],\n    8: [function (require, module, exports) {\n      'use strict';\n\n      var actions = require('./base');\n\n      var utils = require('../utils');\n\n      var scope = require('../scope');\n      /** @lends module:interact */\n\n\n      var interact = require('../interact');\n\n      var InteractEvent = require('../InteractEvent');\n      /** @lends Interactable */\n\n\n      var Interactable = require('../Interactable');\n\n      var Interaction = require('../Interaction');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var drop = {\n        defaults: {\n          enabled: false,\n          accept: null,\n          overlap: 'pointer'\n        }\n      };\n      var dynamicDrop = false;\n      Interaction.signals.on('action-start', function (_ref) {\n        var interaction = _ref.interaction,\n            event = _ref.event;\n\n        if (interaction.prepared.name !== 'drag') {\n          return;\n        } // reset active dropzones\n\n\n        interaction.activeDrops.dropzones = [];\n        interaction.activeDrops.elements = [];\n        interaction.activeDrops.rects = [];\n        interaction.dropEvents = null;\n\n        if (!interaction.dynamicDrop) {\n          setActiveDrops(interaction.activeDrops, interaction.element);\n        }\n\n        var dragEvent = interaction.prevEvent;\n        var dropEvents = getDropEvents(interaction, event, dragEvent);\n\n        if (dropEvents.activate) {\n          fireActiveDrops(interaction.activeDrops, dropEvents.activate);\n        }\n      });\n      InteractEvent.signals.on('new', function (_ref2) {\n        var interaction = _ref2.interaction,\n            iEvent = _ref2.iEvent,\n            event = _ref2.event;\n\n        if (iEvent.type !== 'dragmove' && iEvent.type !== 'dragend') {\n          return;\n        }\n\n        var draggableElement = interaction.element;\n        var dragEvent = iEvent;\n        var dropResult = getDrop(dragEvent, event, draggableElement);\n        interaction.dropTarget = dropResult.dropzone;\n        interaction.dropElement = dropResult.element;\n        interaction.dropEvents = getDropEvents(interaction, event, dragEvent);\n      });\n      Interaction.signals.on('action-move', function (_ref3) {\n        var interaction = _ref3.interaction;\n\n        if (interaction.prepared.name !== 'drag') {\n          return;\n        }\n\n        fireDropEvents(interaction, interaction.dropEvents);\n      });\n      Interaction.signals.on('action-end', function (_ref4) {\n        var interaction = _ref4.interaction;\n\n        if (interaction.prepared.name === 'drag') {\n          fireDropEvents(interaction, interaction.dropEvents);\n        }\n      });\n      Interaction.signals.on('stop-drag', function (_ref5) {\n        var interaction = _ref5.interaction;\n        interaction.activeDrops = {\n          dropzones: null,\n          elements: null,\n          rects: null\n        };\n        interaction.dropEvents = null;\n      });\n\n      function collectDrops(activeDrops, element) {\n        var drops = [];\n        var elements = []; // collect all dropzones and their elements which qualify for a drop\n\n        for (var _i = 0; _i < scope.interactables.length; _i++) {\n          var _ref6;\n\n          _ref6 = scope.interactables[_i];\n          var current = _ref6;\n\n          if (!current.options.drop.enabled) {\n            continue;\n          }\n\n          var accept = current.options.drop.accept; // test the draggable element against the dropzone's accept setting\n\n          if (utils.is.element(accept) && accept !== element || utils.is.string(accept) && !utils.matchesSelector(element, accept)) {\n            continue;\n          } // query for new elements if necessary\n\n\n          var dropElements = utils.is.string(current.target) ? current._context.querySelectorAll(current.target) : [current.target];\n\n          for (var _i2 = 0; _i2 < dropElements.length; _i2++) {\n            var _ref7;\n\n            _ref7 = dropElements[_i2];\n            var currentElement = _ref7;\n\n            if (currentElement !== element) {\n              drops.push(current);\n              elements.push(currentElement);\n            }\n          }\n        }\n\n        return {\n          elements: elements,\n          dropzones: drops\n        };\n      }\n\n      function fireActiveDrops(activeDrops, event) {\n        var prevElement = void 0; // loop through all active dropzones and trigger event\n\n        for (var i = 0; i < activeDrops.dropzones.length; i++) {\n          var current = activeDrops.dropzones[i];\n          var currentElement = activeDrops.elements[i]; // prevent trigger of duplicate events on same element\n\n          if (currentElement !== prevElement) {\n            // set current element as event target\n            event.target = currentElement;\n            current.fire(event);\n          }\n\n          prevElement = currentElement;\n        }\n      } // Collect a new set of possible drops and save them in activeDrops.\n      // setActiveDrops should always be called when a drag has just started or a\n      // drag event happens while dynamicDrop is true\n\n\n      function setActiveDrops(activeDrops, dragElement) {\n        // get dropzones and their elements that could receive the draggable\n        var possibleDrops = collectDrops(activeDrops, dragElement);\n        activeDrops.dropzones = possibleDrops.dropzones;\n        activeDrops.elements = possibleDrops.elements;\n        activeDrops.rects = [];\n\n        for (var i = 0; i < activeDrops.dropzones.length; i++) {\n          activeDrops.rects[i] = activeDrops.dropzones[i].getRect(activeDrops.elements[i]);\n        }\n      }\n\n      function getDrop(dragEvent, event, dragElement) {\n        var interaction = dragEvent.interaction;\n        var validDrops = [];\n\n        if (dynamicDrop) {\n          setActiveDrops(interaction.activeDrops, dragElement);\n        } // collect all dropzones and their elements which qualify for a drop\n\n\n        for (var j = 0; j < interaction.activeDrops.dropzones.length; j++) {\n          var current = interaction.activeDrops.dropzones[j];\n          var currentElement = interaction.activeDrops.elements[j];\n          var rect = interaction.activeDrops.rects[j];\n          validDrops.push(current.dropCheck(dragEvent, event, interaction.target, dragElement, currentElement, rect) ? currentElement : null);\n        } // get the most appropriate dropzone based on DOM depth and order\n\n\n        var dropIndex = utils.indexOfDeepestElement(validDrops);\n        return {\n          dropzone: interaction.activeDrops.dropzones[dropIndex] || null,\n          element: interaction.activeDrops.elements[dropIndex] || null\n        };\n      }\n\n      function getDropEvents(interaction, pointerEvent, dragEvent) {\n        var dropEvents = {\n          enter: null,\n          leave: null,\n          activate: null,\n          deactivate: null,\n          move: null,\n          drop: null\n        };\n        var tmpl = {\n          dragEvent: dragEvent,\n          interaction: interaction,\n          target: interaction.dropElement,\n          dropzone: interaction.dropTarget,\n          relatedTarget: dragEvent.target,\n          draggable: dragEvent.interactable,\n          timeStamp: dragEvent.timeStamp\n        };\n\n        if (interaction.dropElement !== interaction.prevDropElement) {\n          // if there was a prevDropTarget, create a dragleave event\n          if (interaction.prevDropTarget) {\n            dropEvents.leave = utils.extend({\n              type: 'dragleave'\n            }, tmpl);\n            dragEvent.dragLeave = dropEvents.leave.target = interaction.prevDropElement;\n            dragEvent.prevDropzone = dropEvents.leave.dropzone = interaction.prevDropTarget;\n          } // if the dropTarget is not null, create a dragenter event\n\n\n          if (interaction.dropTarget) {\n            dropEvents.enter = {\n              dragEvent: dragEvent,\n              interaction: interaction,\n              target: interaction.dropElement,\n              dropzone: interaction.dropTarget,\n              relatedTarget: dragEvent.target,\n              draggable: dragEvent.interactable,\n              timeStamp: dragEvent.timeStamp,\n              type: 'dragenter'\n            };\n            dragEvent.dragEnter = interaction.dropElement;\n            dragEvent.dropzone = interaction.dropTarget;\n          }\n        }\n\n        if (dragEvent.type === 'dragend' && interaction.dropTarget) {\n          dropEvents.drop = utils.extend({\n            type: 'drop'\n          }, tmpl);\n          dragEvent.dropzone = interaction.dropTarget;\n          dragEvent.relatedTarget = interaction.dropElement;\n        }\n\n        if (dragEvent.type === 'dragstart') {\n          dropEvents.activate = utils.extend({\n            type: 'dropactivate'\n          }, tmpl);\n          dropEvents.activate.target = null;\n          dropEvents.activate.dropzone = null;\n        }\n\n        if (dragEvent.type === 'dragend') {\n          dropEvents.deactivate = utils.extend({\n            type: 'dropdeactivate'\n          }, tmpl);\n          dropEvents.deactivate.target = null;\n          dropEvents.deactivate.dropzone = null;\n        }\n\n        if (dragEvent.type === 'dragmove' && interaction.dropTarget) {\n          dropEvents.move = utils.extend({\n            dragmove: dragEvent,\n            type: 'dropmove'\n          }, tmpl);\n          dragEvent.dropzone = interaction.dropTarget;\n        }\n\n        return dropEvents;\n      }\n\n      function fireDropEvents(interaction, dropEvents) {\n        var activeDrops = interaction.activeDrops,\n            prevDropTarget = interaction.prevDropTarget,\n            dropTarget = interaction.dropTarget,\n            dropElement = interaction.dropElement;\n\n        if (dropEvents.leave) {\n          prevDropTarget.fire(dropEvents.leave);\n        }\n\n        if (dropEvents.move) {\n          dropTarget.fire(dropEvents.move);\n        }\n\n        if (dropEvents.enter) {\n          dropTarget.fire(dropEvents.enter);\n        }\n\n        if (dropEvents.drop) {\n          dropTarget.fire(dropEvents.drop);\n        }\n\n        if (dropEvents.deactivate) {\n          fireActiveDrops(activeDrops, dropEvents.deactivate);\n        }\n\n        interaction.prevDropTarget = dropTarget;\n        interaction.prevDropElement = dropElement;\n      }\n      /**\n       * ```js\n       * interact(target)\n       * .dropChecker(function(dragEvent,         // related dragmove or dragend event\n       *                       event,             // TouchEvent/PointerEvent/MouseEvent\n       *                       dropped,           // bool result of the default checker\n       *                       dropzone,          // dropzone Interactable\n       *                       dropElement,       // dropzone elemnt\n       *                       draggable,         // draggable Interactable\n       *                       draggableElement) {// draggable element\n       *\n       *   return dropped && event.target.hasAttribute('allow-drop');\n       * }\n       * ```\n       *\n       * ```js\n       * interact('.drop').dropzone({\n       *   accept: '.can-drop' || document.getElementById('single-drop'),\n       *   overlap: 'pointer' || 'center' || zeroToOne\n       * }\n       * ```\n       *\n       * Returns or sets whether draggables can be dropped onto this target to\n       * trigger drop events\n       *\n       * Dropzones can receive the following events:\n       *  - `dropactivate` and `dropdeactivate` when an acceptable drag starts and ends\n       *  - `dragenter` and `dragleave` when a draggable enters and leaves the dropzone\n       *  - `dragmove` when a draggable that has entered the dropzone is moved\n       *  - `drop` when a draggable is dropped into this dropzone\n       *\n       * Use the `accept` option to allow only elements that match the given CSS\n       * selector or element. The value can be:\n       *\n       *  - **an Element** - only that element can be dropped into this dropzone.\n       *  - **a string**, - the element being dragged must match it as a CSS selector.\n       *  - **`null`** - accept options is cleared - it accepts any element.\n       *\n       * Use the `overlap` option to set how drops are checked for. The allowed\n       * values are:\n       *\n       *   - `'pointer'`, the pointer must be over the dropzone (default)\n       *   - `'center'`, the draggable element's center must be over the dropzone\n       *   - a number from 0-1 which is the `(intersection area) / (draggable area)`.\n       *   e.g. `0.5` for drop to happen when half of the area of the draggable is\n       *   over the dropzone\n       *\n       * Use the `checker` option to specify a function to check if a dragged element\n       * is over this Interactable.\n       *\n       * @param {boolean | object | null} [options] The new options to be set.\n       * @return {boolean | Interactable} The current setting or this Interactable\n       */\n\n\n      Interactable.prototype.dropzone = function (options) {\n        if (utils.is.object(options)) {\n          this.options.drop.enabled = options.enabled === false ? false : true;\n\n          if (utils.is.function(options.ondrop)) {\n            this.events.ondrop = options.ondrop;\n          }\n\n          if (utils.is.function(options.ondropactivate)) {\n            this.events.ondropactivate = options.ondropactivate;\n          }\n\n          if (utils.is.function(options.ondropdeactivate)) {\n            this.events.ondropdeactivate = options.ondropdeactivate;\n          }\n\n          if (utils.is.function(options.ondragenter)) {\n            this.events.ondragenter = options.ondragenter;\n          }\n\n          if (utils.is.function(options.ondragleave)) {\n            this.events.ondragleave = options.ondragleave;\n          }\n\n          if (utils.is.function(options.ondropmove)) {\n            this.events.ondropmove = options.ondropmove;\n          }\n\n          if (/^(pointer|center)$/.test(options.overlap)) {\n            this.options.drop.overlap = options.overlap;\n          } else if (utils.is.number(options.overlap)) {\n            this.options.drop.overlap = Math.max(Math.min(1, options.overlap), 0);\n          }\n\n          if ('accept' in options) {\n            this.options.drop.accept = options.accept;\n          }\n\n          if ('checker' in options) {\n            this.options.drop.checker = options.checker;\n          }\n\n          return this;\n        }\n\n        if (utils.is.bool(options)) {\n          this.options.drop.enabled = options;\n\n          if (!options) {\n            this.ondragenter = this.ondragleave = this.ondrop = this.ondropactivate = this.ondropdeactivate = null;\n          }\n\n          return this;\n        }\n\n        return this.options.drop;\n      };\n\n      Interactable.prototype.dropCheck = function (dragEvent, event, draggable, draggableElement, dropElement, rect) {\n        var dropped = false; // if the dropzone has no rect (eg. display: none)\n        // call the custom dropChecker or just return false\n\n        if (!(rect = rect || this.getRect(dropElement))) {\n          return this.options.drop.checker ? this.options.drop.checker(dragEvent, event, dropped, this, dropElement, draggable, draggableElement) : false;\n        }\n\n        var dropOverlap = this.options.drop.overlap;\n\n        if (dropOverlap === 'pointer') {\n          var origin = utils.getOriginXY(draggable, draggableElement, 'drag');\n          var page = utils.getPageXY(dragEvent);\n          page.x += origin.x;\n          page.y += origin.y;\n          var horizontal = page.x > rect.left && page.x < rect.right;\n          var vertical = page.y > rect.top && page.y < rect.bottom;\n          dropped = horizontal && vertical;\n        }\n\n        var dragRect = draggable.getRect(draggableElement);\n\n        if (dragRect && dropOverlap === 'center') {\n          var cx = dragRect.left + dragRect.width / 2;\n          var cy = dragRect.top + dragRect.height / 2;\n          dropped = cx >= rect.left && cx <= rect.right && cy >= rect.top && cy <= rect.bottom;\n        }\n\n        if (dragRect && utils.is.number(dropOverlap)) {\n          var overlapArea = Math.max(0, Math.min(rect.right, dragRect.right) - Math.max(rect.left, dragRect.left)) * Math.max(0, Math.min(rect.bottom, dragRect.bottom) - Math.max(rect.top, dragRect.top));\n          var overlapRatio = overlapArea / (dragRect.width * dragRect.height);\n          dropped = overlapRatio >= dropOverlap;\n        }\n\n        if (this.options.drop.checker) {\n          dropped = this.options.drop.checker(dragEvent, event, dropped, this, dropElement, draggable, draggableElement);\n        }\n\n        return dropped;\n      };\n\n      Interactable.signals.on('unset', function (_ref8) {\n        var interactable = _ref8.interactable;\n        interactable.dropzone(false);\n      });\n      Interactable.settingsMethods.push('dropChecker');\n      Interaction.signals.on('new', function (interaction) {\n        interaction.dropTarget = null; // the dropzone a drag target might be dropped into\n\n        interaction.dropElement = null; // the element at the time of checking\n\n        interaction.prevDropTarget = null; // the dropzone that was recently dragged away from\n\n        interaction.prevDropElement = null; // the element at the time of checking\n\n        interaction.dropEvents = null; // the dropEvents related to the current drag event\n\n        interaction.activeDrops = {\n          dropzones: [],\n          // the dropzones that are mentioned below\n          elements: [],\n          // elements of dropzones that accept the target draggable\n          rects: [] // the rects of the elements mentioned above\n\n        };\n      });\n      Interaction.signals.on('stop', function (_ref9) {\n        var interaction = _ref9.interaction;\n        interaction.dropTarget = interaction.dropElement = interaction.prevDropTarget = interaction.prevDropElement = null;\n      });\n      /**\n       * Returns or sets whether the dimensions of dropzone elements are calculated\n       * on every dragmove or only on dragstart for the default dropChecker\n       *\n       * @param {boolean} [newValue] True to check on each move. False to check only\n       * before start\n       * @return {boolean | interact} The current setting or interact\n       */\n\n      interact.dynamicDrop = function (newValue) {\n        if (utils.is.bool(newValue)) {\n          //if (dragging && dynamicDrop !== newValue && !newValue) {\n          //calcRects(dropzones);\n          //}\n          dynamicDrop = newValue;\n          return interact;\n        }\n\n        return dynamicDrop;\n      };\n\n      utils.merge(Interactable.eventTypes, ['dragenter', 'dragleave', 'dropactivate', 'dropdeactivate', 'dropmove', 'drop']);\n      actions.methodDict.drop = 'dropzone';\n      defaultOptions.drop = drop.defaults;\n      module.exports = drop;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interactable\": 4,\n      \"../Interaction\": 5,\n      \"../defaultOptions\": 18,\n      \"../interact\": 21,\n      \"../scope\": 33,\n      \"../utils\": 44,\n      \"./base\": 6\n    }],\n    9: [function (require, module, exports) {\n      'use strict';\n\n      var actions = require('./base');\n\n      var utils = require('../utils');\n\n      var InteractEvent = require('../InteractEvent');\n\n      var Interactable = require('../Interactable');\n\n      var Interaction = require('../Interaction');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var gesture = {\n        defaults: {\n          enabled: false,\n          origin: null,\n          restrict: null\n        },\n        checker: function checker(pointer, event, interactable, element, interaction) {\n          if (interaction.pointerIds.length >= 2) {\n            return {\n              name: 'gesture'\n            };\n          }\n\n          return null;\n        },\n        getCursor: function getCursor() {\n          return '';\n        }\n      };\n      InteractEvent.signals.on('new', function (_ref) {\n        var iEvent = _ref.iEvent,\n            interaction = _ref.interaction;\n\n        if (iEvent.type !== 'gesturestart') {\n          return;\n        }\n\n        iEvent.ds = 0;\n        interaction.gesture.startDistance = interaction.gesture.prevDistance = iEvent.distance;\n        interaction.gesture.startAngle = interaction.gesture.prevAngle = iEvent.angle;\n        interaction.gesture.scale = 1;\n      });\n      InteractEvent.signals.on('new', function (_ref2) {\n        var iEvent = _ref2.iEvent,\n            interaction = _ref2.interaction;\n\n        if (iEvent.type !== 'gesturemove') {\n          return;\n        }\n\n        iEvent.ds = iEvent.scale - interaction.gesture.scale;\n        interaction.target.fire(iEvent);\n        interaction.gesture.prevAngle = iEvent.angle;\n        interaction.gesture.prevDistance = iEvent.distance;\n\n        if (iEvent.scale !== Infinity && iEvent.scale !== null && iEvent.scale !== undefined && !isNaN(iEvent.scale)) {\n          interaction.gesture.scale = iEvent.scale;\n        }\n      });\n      /**\n       * ```js\n       * interact(element).gesturable({\n       *     onstart: function (event) {},\n       *     onmove : function (event) {},\n       *     onend  : function (event) {},\n       *\n       *     // limit multiple gestures.\n       *     // See the explanation in {@link Interactable.draggable} example\n       *     max: Infinity,\n       *     maxPerElement: 1,\n       * });\n       *\n       * var isGestureable = interact(element).gesturable();\n       * ```\n       *\n       * Gets or sets whether multitouch gestures can be performed on the target\n       *\n       * @param {boolean | object} [options] true/false or An object with event\n       * listeners to be fired on gesture events (makes the Interactable gesturable)\n       * @return {boolean | Interactable} A boolean indicating if this can be the\n       * target of gesture events, or this Interactable\n       */\n\n      Interactable.prototype.gesturable = function (options) {\n        if (utils.is.object(options)) {\n          this.options.gesture.enabled = options.enabled === false ? false : true;\n          this.setPerAction('gesture', options);\n          this.setOnEvents('gesture', options);\n          return this;\n        }\n\n        if (utils.is.bool(options)) {\n          this.options.gesture.enabled = options;\n\n          if (!options) {\n            this.ongesturestart = this.ongesturestart = this.ongestureend = null;\n          }\n\n          return this;\n        }\n\n        return this.options.gesture;\n      };\n\n      InteractEvent.signals.on('set-delta', function (_ref3) {\n        var interaction = _ref3.interaction,\n            iEvent = _ref3.iEvent,\n            action = _ref3.action,\n            event = _ref3.event,\n            starting = _ref3.starting,\n            ending = _ref3.ending,\n            deltaSource = _ref3.deltaSource;\n\n        if (action !== 'gesture') {\n          return;\n        }\n\n        var pointers = interaction.pointers;\n        iEvent.touches = [pointers[0], pointers[1]];\n\n        if (starting) {\n          iEvent.distance = utils.touchDistance(pointers, deltaSource);\n          iEvent.box = utils.touchBBox(pointers);\n          iEvent.scale = 1;\n          iEvent.ds = 0;\n          iEvent.angle = utils.touchAngle(pointers, undefined, deltaSource);\n          iEvent.da = 0;\n        } else if (ending || event instanceof InteractEvent) {\n          iEvent.distance = interaction.prevEvent.distance;\n          iEvent.box = interaction.prevEvent.box;\n          iEvent.scale = interaction.prevEvent.scale;\n          iEvent.ds = iEvent.scale - 1;\n          iEvent.angle = interaction.prevEvent.angle;\n          iEvent.da = iEvent.angle - interaction.gesture.startAngle;\n        } else {\n          iEvent.distance = utils.touchDistance(pointers, deltaSource);\n          iEvent.box = utils.touchBBox(pointers);\n          iEvent.scale = iEvent.distance / interaction.gesture.startDistance;\n          iEvent.angle = utils.touchAngle(pointers, interaction.gesture.prevAngle, deltaSource);\n          iEvent.ds = iEvent.scale - interaction.gesture.prevScale;\n          iEvent.da = iEvent.angle - interaction.gesture.prevAngle;\n        }\n      });\n      Interaction.signals.on('new', function (interaction) {\n        interaction.gesture = {\n          start: {\n            x: 0,\n            y: 0\n          },\n          startDistance: 0,\n          // distance between two touches of touchStart\n          prevDistance: 0,\n          distance: 0,\n          scale: 1,\n          // gesture.distance / gesture.startDistance\n          startAngle: 0,\n          // angle of line joining two touches\n          prevAngle: 0 // angle of the previous gesture event\n\n        };\n      });\n      actions.gesture = gesture;\n      actions.names.push('gesture');\n      utils.merge(Interactable.eventTypes, ['gesturestart', 'gesturemove', 'gestureend']);\n      actions.methodDict.gesture = 'gesturable';\n      defaultOptions.gesture = gesture.defaults;\n      module.exports = gesture;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interactable\": 4,\n      \"../Interaction\": 5,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"./base\": 6\n    }],\n    10: [function (require, module, exports) {\n      'use strict';\n\n      var actions = require('./base');\n\n      var utils = require('../utils');\n\n      var browser = require('../utils/browser');\n\n      var InteractEvent = require('../InteractEvent');\n      /** @lends Interactable */\n\n\n      var Interactable = require('../Interactable');\n\n      var Interaction = require('../Interaction');\n\n      var defaultOptions = require('../defaultOptions'); // Less Precision with touch input\n\n\n      var defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10;\n      var resize = {\n        defaults: {\n          enabled: false,\n          mouseButtons: null,\n          origin: null,\n          snap: null,\n          restrict: null,\n          inertia: null,\n          autoScroll: null,\n          square: false,\n          preserveAspectRatio: false,\n          axis: 'xy',\n          // use default margin\n          margin: NaN,\n          // object with props left, right, top, bottom which are\n          // true/false values to resize when the pointer is over that edge,\n          // CSS selectors to match the handles for each direction\n          // or the Elements for each handle\n          edges: null,\n          // a value of 'none' will limit the resize rect to a minimum of 0x0\n          // 'negate' will alow the rect to have negative width/height\n          // 'reposition' will keep the width/height positive by swapping\n          // the top and bottom edges and/or swapping the left and right edges\n          invert: 'none'\n        },\n        checker: function checker(pointer, event, interactable, element, interaction, rect) {\n          if (!rect) {\n            return null;\n          }\n\n          var page = utils.extend({}, interaction.curCoords.page);\n          var options = interactable.options;\n\n          if (options.resize.enabled) {\n            var resizeOptions = options.resize;\n            var resizeEdges = {\n              left: false,\n              right: false,\n              top: false,\n              bottom: false\n            }; // if using resize.edges\n\n            if (utils.is.object(resizeOptions.edges)) {\n              for (var edge in resizeEdges) {\n                resizeEdges[edge] = checkResizeEdge(edge, resizeOptions.edges[edge], page, interaction._eventTarget, element, rect, resizeOptions.margin || defaultMargin);\n              }\n\n              resizeEdges.left = resizeEdges.left && !resizeEdges.right;\n              resizeEdges.top = resizeEdges.top && !resizeEdges.bottom;\n\n              if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n                return {\n                  name: 'resize',\n                  edges: resizeEdges\n                };\n              }\n            } else {\n              var right = options.resize.axis !== 'y' && page.x > rect.right - defaultMargin;\n              var bottom = options.resize.axis !== 'x' && page.y > rect.bottom - defaultMargin;\n\n              if (right || bottom) {\n                return {\n                  name: 'resize',\n                  axes: (right ? 'x' : '') + (bottom ? 'y' : '')\n                };\n              }\n            }\n          }\n\n          return null;\n        },\n        cursors: browser.isIe9 ? {\n          x: 'e-resize',\n          y: 's-resize',\n          xy: 'se-resize',\n          top: 'n-resize',\n          left: 'w-resize',\n          bottom: 's-resize',\n          right: 'e-resize',\n          topleft: 'se-resize',\n          bottomright: 'se-resize',\n          topright: 'ne-resize',\n          bottomleft: 'ne-resize'\n        } : {\n          x: 'ew-resize',\n          y: 'ns-resize',\n          xy: 'nwse-resize',\n          top: 'ns-resize',\n          left: 'ew-resize',\n          bottom: 'ns-resize',\n          right: 'ew-resize',\n          topleft: 'nwse-resize',\n          bottomright: 'nwse-resize',\n          topright: 'nesw-resize',\n          bottomleft: 'nesw-resize'\n        },\n        getCursor: function getCursor(action) {\n          if (action.axis) {\n            return resize.cursors[action.name + action.axis];\n          } else if (action.edges) {\n            var cursorKey = '';\n            var edgeNames = ['top', 'bottom', 'left', 'right'];\n\n            for (var i = 0; i < 4; i++) {\n              if (action.edges[edgeNames[i]]) {\n                cursorKey += edgeNames[i];\n              }\n            }\n\n            return resize.cursors[cursorKey];\n          }\n        }\n      }; // resizestart\n\n      InteractEvent.signals.on('new', function (_ref) {\n        var iEvent = _ref.iEvent,\n            interaction = _ref.interaction;\n\n        if (iEvent.type !== 'resizestart' || !interaction.prepared.edges) {\n          return;\n        }\n\n        var startRect = interaction.target.getRect(interaction.element);\n        var resizeOptions = interaction.target.options.resize;\n        /*\n         * When using the `resizable.square` or `resizable.preserveAspectRatio` options, resizing from one edge\n         * will affect another. E.g. with `resizable.square`, resizing to make the right edge larger will make\n         * the bottom edge larger by the same amount. We call these 'linked' edges. Any linked edges will depend\n         * on the active edges and the edge being interacted with.\n         */\n\n        if (resizeOptions.square || resizeOptions.preserveAspectRatio) {\n          var linkedEdges = utils.extend({}, interaction.prepared.edges);\n          linkedEdges.top = linkedEdges.top || linkedEdges.left && !linkedEdges.bottom;\n          linkedEdges.left = linkedEdges.left || linkedEdges.top && !linkedEdges.right;\n          linkedEdges.bottom = linkedEdges.bottom || linkedEdges.right && !linkedEdges.top;\n          linkedEdges.right = linkedEdges.right || linkedEdges.bottom && !linkedEdges.left;\n          interaction.prepared._linkedEdges = linkedEdges;\n        } else {\n          interaction.prepared._linkedEdges = null;\n        } // if using `resizable.preserveAspectRatio` option, record aspect ratio at the start of the resize\n\n\n        if (resizeOptions.preserveAspectRatio) {\n          interaction.resizeStartAspectRatio = startRect.width / startRect.height;\n        }\n\n        interaction.resizeRects = {\n          start: startRect,\n          current: utils.extend({}, startRect),\n          inverted: utils.extend({}, startRect),\n          previous: utils.extend({}, startRect),\n          delta: {\n            left: 0,\n            right: 0,\n            width: 0,\n            top: 0,\n            bottom: 0,\n            height: 0\n          }\n        };\n        iEvent.rect = interaction.resizeRects.inverted;\n        iEvent.deltaRect = interaction.resizeRects.delta;\n      }); // resizemove\n\n      InteractEvent.signals.on('new', function (_ref2) {\n        var iEvent = _ref2.iEvent,\n            phase = _ref2.phase,\n            interaction = _ref2.interaction;\n\n        if (phase !== 'move' || !interaction.prepared.edges) {\n          return;\n        }\n\n        var resizeOptions = interaction.target.options.resize;\n        var invert = resizeOptions.invert;\n        var invertible = invert === 'reposition' || invert === 'negate';\n        var edges = interaction.prepared.edges;\n        var start = interaction.resizeRects.start;\n        var current = interaction.resizeRects.current;\n        var inverted = interaction.resizeRects.inverted;\n        var delta = interaction.resizeRects.delta;\n        var previous = utils.extend(interaction.resizeRects.previous, inverted);\n        var originalEdges = edges;\n        var dx = iEvent.dx;\n        var dy = iEvent.dy;\n\n        if (resizeOptions.preserveAspectRatio || resizeOptions.square) {\n          // `resize.preserveAspectRatio` takes precedence over `resize.square`\n          var startAspectRatio = resizeOptions.preserveAspectRatio ? interaction.resizeStartAspectRatio : 1;\n          edges = interaction.prepared._linkedEdges;\n\n          if (originalEdges.left && originalEdges.bottom || originalEdges.right && originalEdges.top) {\n            dy = -dx / startAspectRatio;\n          } else if (originalEdges.left || originalEdges.right) {\n            dy = dx / startAspectRatio;\n          } else if (originalEdges.top || originalEdges.bottom) {\n            dx = dy * startAspectRatio;\n          }\n        } // update the 'current' rect without modifications\n\n\n        if (edges.top) {\n          current.top += dy;\n        }\n\n        if (edges.bottom) {\n          current.bottom += dy;\n        }\n\n        if (edges.left) {\n          current.left += dx;\n        }\n\n        if (edges.right) {\n          current.right += dx;\n        }\n\n        if (invertible) {\n          // if invertible, copy the current rect\n          utils.extend(inverted, current);\n\n          if (invert === 'reposition') {\n            // swap edge values if necessary to keep width/height positive\n            var swap = void 0;\n\n            if (inverted.top > inverted.bottom) {\n              swap = inverted.top;\n              inverted.top = inverted.bottom;\n              inverted.bottom = swap;\n            }\n\n            if (inverted.left > inverted.right) {\n              swap = inverted.left;\n              inverted.left = inverted.right;\n              inverted.right = swap;\n            }\n          }\n        } else {\n          // if not invertible, restrict to minimum of 0x0 rect\n          inverted.top = Math.min(current.top, start.bottom);\n          inverted.bottom = Math.max(current.bottom, start.top);\n          inverted.left = Math.min(current.left, start.right);\n          inverted.right = Math.max(current.right, start.left);\n        }\n\n        inverted.width = inverted.right - inverted.left;\n        inverted.height = inverted.bottom - inverted.top;\n\n        for (var edge in inverted) {\n          delta[edge] = inverted[edge] - previous[edge];\n        }\n\n        iEvent.edges = interaction.prepared.edges;\n        iEvent.rect = inverted;\n        iEvent.deltaRect = delta;\n      });\n      /**\n       * ```js\n       * interact(element).resizable({\n       *   onstart: function (event) {},\n       *   onmove : function (event) {},\n       *   onend  : function (event) {},\n       *\n       *   edges: {\n       *     top   : true,       // Use pointer coords to check for resize.\n       *     left  : false,      // Disable resizing from left edge.\n       *     bottom: '.resize-s',// Resize if pointer target matches selector\n       *     right : handleEl    // Resize if pointer target is the given Element\n       *   },\n       *\n       *     // Width and height can be adjusted independently. When `true`, width and\n       *     // height are adjusted at a 1:1 ratio.\n       *     square: false,\n       *\n       *     // Width and height can be adjusted independently. When `true`, width and\n       *     // height maintain the aspect ratio they had when resizing started.\n       *     preserveAspectRatio: false,\n       *\n       *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n       *   // 'negate' will allow the rect to have negative width/height\n       *   // 'reposition' will keep the width/height positive by swapping\n       *   // the top and bottom edges and/or swapping the left and right edges\n       *   invert: 'none' || 'negate' || 'reposition'\n       *\n       *   // limit multiple resizes.\n       *   // See the explanation in the {@link Interactable.draggable} example\n       *   max: Infinity,\n       *   maxPerElement: 1,\n       * });\n       *\n       * var isResizeable = interact(element).resizable();\n       * ```\n       *\n       * Gets or sets whether resize actions can be performed on the target\n       *\n       * @param {boolean | object} [options] true/false or An object with event\n       * listeners to be fired on resize events (object makes the Interactable\n       * resizable)\n       * @return {boolean | Interactable} A boolean indicating if this can be the\n       * target of resize elements, or this Interactable\n       */\n\n      Interactable.prototype.resizable = function (options) {\n        if (utils.is.object(options)) {\n          this.options.resize.enabled = options.enabled === false ? false : true;\n          this.setPerAction('resize', options);\n          this.setOnEvents('resize', options);\n\n          if (/^x$|^y$|^xy$/.test(options.axis)) {\n            this.options.resize.axis = options.axis;\n          } else if (options.axis === null) {\n            this.options.resize.axis = defaultOptions.resize.axis;\n          }\n\n          if (utils.is.bool(options.preserveAspectRatio)) {\n            this.options.resize.preserveAspectRatio = options.preserveAspectRatio;\n          } else if (utils.is.bool(options.square)) {\n            this.options.resize.square = options.square;\n          }\n\n          return this;\n        }\n\n        if (utils.is.bool(options)) {\n          this.options.resize.enabled = options;\n\n          if (!options) {\n            this.onresizestart = this.onresizestart = this.onresizeend = null;\n          }\n\n          return this;\n        }\n\n        return this.options.resize;\n      };\n\n      function checkResizeEdge(name, value, page, element, interactableElement, rect, margin) {\n        // false, '', undefined, null\n        if (!value) {\n          return false;\n        } // true value, use pointer coords and element rect\n\n\n        if (value === true) {\n          // if dimensions are negative, \"switch\" edges\n          var width = utils.is.number(rect.width) ? rect.width : rect.right - rect.left;\n          var height = utils.is.number(rect.height) ? rect.height : rect.bottom - rect.top;\n\n          if (width < 0) {\n            if (name === 'left') {\n              name = 'right';\n            } else if (name === 'right') {\n              name = 'left';\n            }\n          }\n\n          if (height < 0) {\n            if (name === 'top') {\n              name = 'bottom';\n            } else if (name === 'bottom') {\n              name = 'top';\n            }\n          }\n\n          if (name === 'left') {\n            return page.x < (width >= 0 ? rect.left : rect.right) + margin;\n          }\n\n          if (name === 'top') {\n            return page.y < (height >= 0 ? rect.top : rect.bottom) + margin;\n          }\n\n          if (name === 'right') {\n            return page.x > (width >= 0 ? rect.right : rect.left) - margin;\n          }\n\n          if (name === 'bottom') {\n            return page.y > (height >= 0 ? rect.bottom : rect.top) - margin;\n          }\n        } // the remaining checks require an element\n\n\n        if (!utils.is.element(element)) {\n          return false;\n        }\n\n        return utils.is.element(value) // the value is an element to use as a resize handle\n        ? value === element // otherwise check if element matches value as selector\n        : utils.matchesUpTo(element, value, interactableElement);\n      }\n\n      Interaction.signals.on('new', function (interaction) {\n        interaction.resizeAxes = 'xy';\n      });\n      InteractEvent.signals.on('set-delta', function (_ref3) {\n        var interaction = _ref3.interaction,\n            iEvent = _ref3.iEvent,\n            action = _ref3.action;\n\n        if (action !== 'resize' || !interaction.resizeAxes) {\n          return;\n        }\n\n        var options = interaction.target.options;\n\n        if (options.resize.square) {\n          if (interaction.resizeAxes === 'y') {\n            iEvent.dx = iEvent.dy;\n          } else {\n            iEvent.dy = iEvent.dx;\n          }\n\n          iEvent.axes = 'xy';\n        } else {\n          iEvent.axes = interaction.resizeAxes;\n\n          if (interaction.resizeAxes === 'x') {\n            iEvent.dy = 0;\n          } else if (interaction.resizeAxes === 'y') {\n            iEvent.dx = 0;\n          }\n        }\n      });\n      actions.resize = resize;\n      actions.names.push('resize');\n      utils.merge(Interactable.eventTypes, ['resizestart', 'resizemove', 'resizeinertiastart', 'resizeinertiaresume', 'resizeend']);\n      actions.methodDict.resize = 'resizable';\n      defaultOptions.resize = resize.defaults;\n      module.exports = resize;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interactable\": 4,\n      \"../Interaction\": 5,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"../utils/browser\": 36,\n      \"./base\": 6\n    }],\n    11: [function (require, module, exports) {\n      'use strict';\n\n      var raf = require('./utils/raf');\n\n      var getWindow = require('./utils/window').getWindow;\n\n      var is = require('./utils/is');\n\n      var domUtils = require('./utils/domUtils');\n\n      var Interaction = require('./Interaction');\n\n      var defaultOptions = require('./defaultOptions');\n\n      var autoScroll = {\n        defaults: {\n          enabled: false,\n          container: null,\n          // the item that is scrolled (Window or HTMLElement)\n          margin: 60,\n          speed: 300 // the scroll speed in pixels per second\n\n        },\n        interaction: null,\n        i: null,\n        // the handle returned by window.setInterval\n        x: 0,\n        y: 0,\n        // Direction each pulse is to scroll in\n        isScrolling: false,\n        prevTime: 0,\n        start: function start(interaction) {\n          autoScroll.isScrolling = true;\n          raf.cancel(autoScroll.i);\n          autoScroll.interaction = interaction;\n          autoScroll.prevTime = new Date().getTime();\n          autoScroll.i = raf.request(autoScroll.scroll);\n        },\n        stop: function stop() {\n          autoScroll.isScrolling = false;\n          raf.cancel(autoScroll.i);\n        },\n        // scroll the window by the values in scroll.x/y\n        scroll: function scroll() {\n          var options = autoScroll.interaction.target.options[autoScroll.interaction.prepared.name].autoScroll;\n          var container = options.container || getWindow(autoScroll.interaction.element);\n          var now = new Date().getTime(); // change in time in seconds\n\n          var dt = (now - autoScroll.prevTime) / 1000; // displacement\n\n          var s = options.speed * dt;\n\n          if (s >= 1) {\n            if (is.window(container)) {\n              container.scrollBy(autoScroll.x * s, autoScroll.y * s);\n            } else if (container) {\n              container.scrollLeft += autoScroll.x * s;\n              container.scrollTop += autoScroll.y * s;\n            }\n\n            autoScroll.prevTime = now;\n          }\n\n          if (autoScroll.isScrolling) {\n            raf.cancel(autoScroll.i);\n            autoScroll.i = raf.request(autoScroll.scroll);\n          }\n        },\n        check: function check(interactable, actionName) {\n          var options = interactable.options;\n          return options[actionName].autoScroll && options[actionName].autoScroll.enabled;\n        },\n        onInteractionMove: function onInteractionMove(_ref) {\n          var interaction = _ref.interaction,\n              pointer = _ref.pointer;\n\n          if (!(interaction.interacting() && autoScroll.check(interaction.target, interaction.prepared.name))) {\n            return;\n          }\n\n          if (interaction.simulation) {\n            autoScroll.x = autoScroll.y = 0;\n            return;\n          }\n\n          var top = void 0;\n          var right = void 0;\n          var bottom = void 0;\n          var left = void 0;\n          var options = interaction.target.options[interaction.prepared.name].autoScroll;\n          var container = options.container || getWindow(interaction.element);\n\n          if (is.window(container)) {\n            left = pointer.clientX < autoScroll.margin;\n            top = pointer.clientY < autoScroll.margin;\n            right = pointer.clientX > container.innerWidth - autoScroll.margin;\n            bottom = pointer.clientY > container.innerHeight - autoScroll.margin;\n          } else {\n            var rect = domUtils.getElementClientRect(container);\n            left = pointer.clientX < rect.left + autoScroll.margin;\n            top = pointer.clientY < rect.top + autoScroll.margin;\n            right = pointer.clientX > rect.right - autoScroll.margin;\n            bottom = pointer.clientY > rect.bottom - autoScroll.margin;\n          }\n\n          autoScroll.x = right ? 1 : left ? -1 : 0;\n          autoScroll.y = bottom ? 1 : top ? -1 : 0;\n\n          if (!autoScroll.isScrolling) {\n            // set the autoScroll properties to those of the target\n            autoScroll.margin = options.margin;\n            autoScroll.speed = options.speed;\n            autoScroll.start(interaction);\n          }\n        }\n      };\n      Interaction.signals.on('stop-active', function () {\n        autoScroll.stop();\n      });\n      Interaction.signals.on('action-move', autoScroll.onInteractionMove);\n      defaultOptions.perAction.autoScroll = autoScroll.defaults;\n      module.exports = autoScroll;\n    }, {\n      \"./Interaction\": 5,\n      \"./defaultOptions\": 18,\n      \"./utils/domUtils\": 39,\n      \"./utils/is\": 46,\n      \"./utils/raf\": 50,\n      \"./utils/window\": 52\n    }],\n    12: [function (require, module, exports) {\n      'use strict';\n      /** @lends Interactable */\n\n      var Interactable = require('../Interactable');\n\n      var actions = require('../actions/base');\n\n      var is = require('../utils/is');\n\n      var domUtils = require('../utils/domUtils');\n\n      var _require = require('../utils'),\n          warnOnce = _require.warnOnce;\n\n      Interactable.prototype.getAction = function (pointer, event, interaction, element) {\n        var action = this.defaultActionChecker(pointer, event, interaction, element);\n\n        if (this.options.actionChecker) {\n          return this.options.actionChecker(pointer, event, action, this, element, interaction);\n        }\n\n        return action;\n      };\n      /**\n       * ```js\n       * interact(element, { ignoreFrom: document.getElementById('no-action') });\n       * // or\n       * interact(element).ignoreFrom('input, textarea, a');\n       * ```\n       * @deprecated\n       * If the target of the `mousedown`, `pointerdown` or `touchstart` event or any\n       * of it's parents match the given CSS selector or Element, no\n       * drag/resize/gesture is started.\n       *\n       * Don't use this method. Instead set the `ignoreFrom` option for each action\n       * or for `pointerEvents`\n       *\n       * @example\n       * interact(targett)\n       *   .draggable({\n       *     ignoreFrom: 'input, textarea, a[href]'',\n       *   })\n       *   .pointerEvents({\n       *     ignoreFrom: '[no-pointer]',\n       *   });\n       *\n       * @param {string | Element | null} [newValue] a CSS selector string, an\n       * Element or `null` to not ignore any elements\n       * @return {string | Element | object} The current ignoreFrom value or this\n       * Interactable\n       */\n\n\n      Interactable.prototype.ignoreFrom = warnOnce(function (newValue) {\n        return this._backCompatOption('ignoreFrom', newValue);\n      }, 'Interactable.ignoreForm() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue}).');\n      /**\n       * ```js\n       *\n       * @deprecated\n       * A drag/resize/gesture is started only If the target of the `mousedown`,\n       * `pointerdown` or `touchstart` event or any of it's parents match the given\n       * CSS selector or Element.\n       *\n       * Don't use this method. Instead set the `allowFrom` option for each action\n       * or for `pointerEvents`\n       *\n       * @example\n       * interact(targett)\n       *   .resizable({\n       *     allowFrom: '.resize-handle',\n       *   .pointerEvents({\n       *     allowFrom: '.handle',,\n       *   });\n       *\n       * @param {string | Element | null} [newValue] a CSS selector string, an\n       * Element or `null` to allow from any element\n       * @return {string | Element | object} The current allowFrom value or this\n       * Interactable\n       */\n\n      Interactable.prototype.allowFrom = warnOnce(function (newValue) {\n        return this._backCompatOption('allowFrom', newValue);\n      }, 'Interactable.allowForm() has been deprecated. Use Interactble.draggable({allowFrom: newValue}).');\n\n      Interactable.prototype.testIgnore = function (ignoreFrom, interactableElement, element) {\n        if (!ignoreFrom || !is.element(element)) {\n          return false;\n        }\n\n        if (is.string(ignoreFrom)) {\n          return domUtils.matchesUpTo(element, ignoreFrom, interactableElement);\n        } else if (is.element(ignoreFrom)) {\n          return domUtils.nodeContains(ignoreFrom, element);\n        }\n\n        return false;\n      };\n\n      Interactable.prototype.testAllow = function (allowFrom, interactableElement, element) {\n        if (!allowFrom) {\n          return true;\n        }\n\n        if (!is.element(element)) {\n          return false;\n        }\n\n        if (is.string(allowFrom)) {\n          return domUtils.matchesUpTo(element, allowFrom, interactableElement);\n        } else if (is.element(allowFrom)) {\n          return domUtils.nodeContains(allowFrom, element);\n        }\n\n        return false;\n      };\n\n      Interactable.prototype.testIgnoreAllow = function (options, interactableElement, eventTarget) {\n        return !this.testIgnore(options.ignoreFrom, interactableElement, eventTarget) && this.testAllow(options.allowFrom, interactableElement, eventTarget);\n      };\n      /**\n       * ```js\n       * interact('.resize-drag')\n       *   .resizable(true)\n       *   .draggable(true)\n       *   .actionChecker(function (pointer, event, action, interactable, element, interaction) {\n       *\n       *   if (interact.matchesSelector(event.target, '.drag-handle') {\n       *     // force drag with handle target\n       *     action.name = drag;\n       *   }\n       *   else {\n       *     // resize from the top and right edges\n       *     action.name  = 'resize';\n       *     action.edges = { top: true, right: true };\n       *   }\n       *\n       *   return action;\n       * });\n       * ```\n       *\n       * Gets or sets the function used to check action to be performed on\n       * pointerDown\n       *\n       * @param {function | null} [checker] A function which takes a pointer event,\n       * defaultAction string, interactable, element and interaction as parameters\n       * and returns an object with name property 'drag' 'resize' or 'gesture' and\n       * optionally an `edges` object with boolean 'top', 'left', 'bottom' and right\n       * props.\n       * @return {Function | Interactable} The checker function or this Interactable\n       */\n\n\n      Interactable.prototype.actionChecker = function (checker) {\n        if (is.function(checker)) {\n          this.options.actionChecker = checker;\n          return this;\n        }\n\n        if (checker === null) {\n          delete this.options.actionChecker;\n          return this;\n        }\n\n        return this.options.actionChecker;\n      };\n      /**\n       * Returns or sets whether the the cursor should be changed depending on the\n       * action that would be performed if the mouse were pressed and dragged.\n       *\n       * @param {boolean} [newValue]\n       * @return {boolean | Interactable} The current setting or this Interactable\n       */\n\n\n      Interactable.prototype.styleCursor = function (newValue) {\n        if (is.bool(newValue)) {\n          this.options.styleCursor = newValue;\n          return this;\n        }\n\n        if (newValue === null) {\n          delete this.options.styleCursor;\n          return this;\n        }\n\n        return this.options.styleCursor;\n      };\n\n      Interactable.prototype.defaultActionChecker = function (pointer, event, interaction, element) {\n        var rect = this.getRect(element);\n        var buttons = event.buttons || {\n          0: 1,\n          1: 4,\n          3: 8,\n          4: 16\n        }[event.button];\n        var action = null;\n\n        for (var _i = 0; _i < actions.names.length; _i++) {\n          var _ref;\n\n          _ref = actions.names[_i];\n          var actionName = _ref; // check mouseButton setting if the pointer is down\n\n          if (interaction.pointerIsDown && /mouse|pointer/.test(interaction.pointerType) && (buttons & this.options[actionName].mouseButtons) === 0) {\n            continue;\n          }\n\n          action = actions[actionName].checker(pointer, event, this, element, interaction, rect);\n\n          if (action) {\n            return action;\n          }\n        }\n      };\n    }, {\n      \"../Interactable\": 4,\n      \"../actions/base\": 6,\n      \"../utils\": 44,\n      \"../utils/domUtils\": 39,\n      \"../utils/is\": 46\n    }],\n    13: [function (require, module, exports) {\n      'use strict';\n\n      var interact = require('../interact');\n\n      var Interactable = require('../Interactable');\n\n      var Interaction = require('../Interaction');\n\n      var actions = require('../actions/base');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var scope = require('../scope');\n\n      var utils = require('../utils');\n\n      var signals = require('../utils/Signals').new();\n\n      require('./InteractableMethods');\n\n      var autoStart = {\n        signals: signals,\n        withinInteractionLimit: withinInteractionLimit,\n        // Allow this many interactions to happen simultaneously\n        maxInteractions: Infinity,\n        defaults: {\n          perAction: {\n            manualStart: false,\n            max: Infinity,\n            maxPerElement: 1,\n            allowFrom: null,\n            ignoreFrom: null,\n            // only allow left button by default\n            // see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#Return_value\n            mouseButtons: 1\n          }\n        },\n        setActionDefaults: function setActionDefaults(action) {\n          utils.extend(action.defaults, autoStart.defaults.perAction);\n        },\n        validateAction: validateAction\n      }; // set cursor style on mousedown\n\n      Interaction.signals.on('down', function (_ref) {\n        var interaction = _ref.interaction,\n            pointer = _ref.pointer,\n            event = _ref.event,\n            eventTarget = _ref.eventTarget;\n\n        if (interaction.interacting()) {\n          return;\n        }\n\n        var actionInfo = getActionInfo(interaction, pointer, event, eventTarget);\n        prepare(interaction, actionInfo);\n      }); // set cursor style on mousemove\n\n      Interaction.signals.on('move', function (_ref2) {\n        var interaction = _ref2.interaction,\n            pointer = _ref2.pointer,\n            event = _ref2.event,\n            eventTarget = _ref2.eventTarget;\n\n        if (interaction.pointerType !== 'mouse' || interaction.pointerIsDown || interaction.interacting()) {\n          return;\n        }\n\n        var actionInfo = getActionInfo(interaction, pointer, event, eventTarget);\n        prepare(interaction, actionInfo);\n      });\n      Interaction.signals.on('move', function (arg) {\n        var interaction = arg.interaction,\n            event = arg.event;\n\n        if (!interaction.pointerIsDown || interaction.interacting() || !interaction.pointerWasMoved || !interaction.prepared.name) {\n          return;\n        }\n\n        signals.fire('before-start', arg);\n        var target = interaction.target;\n\n        if (interaction.prepared.name && target) {\n          // check manualStart and interaction limit\n          if (target.options[interaction.prepared.name].manualStart || !withinInteractionLimit(target, interaction.element, interaction.prepared)) {\n            interaction.stop(event);\n          } else {\n            interaction.start(interaction.prepared, target, interaction.element);\n          }\n        }\n      }); // Check if the current target supports the action.\n      // If so, return the validated action. Otherwise, return null\n\n      function validateAction(action, interactable, element, eventTarget) {\n        if (utils.is.object(action) && interactable.testIgnoreAllow(interactable.options[action.name], element, eventTarget) && interactable.options[action.name].enabled && withinInteractionLimit(interactable, element, action)) {\n          return action;\n        }\n\n        return null;\n      }\n\n      function validateSelector(interaction, pointer, event, matches, matchElements, eventTarget) {\n        for (var i = 0, len = matches.length; i < len; i++) {\n          var match = matches[i];\n          var matchElement = matchElements[i];\n          var action = validateAction(match.getAction(pointer, event, interaction, matchElement), match, matchElement, eventTarget);\n\n          if (action) {\n            return {\n              action: action,\n              target: match,\n              element: matchElement\n            };\n          }\n        }\n\n        return {};\n      }\n\n      function getActionInfo(interaction, pointer, event, eventTarget) {\n        var matches = [];\n        var matchElements = [];\n        var element = eventTarget;\n\n        function pushMatches(interactable) {\n          matches.push(interactable);\n          matchElements.push(element);\n        }\n\n        while (utils.is.element(element)) {\n          matches = [];\n          matchElements = [];\n          scope.interactables.forEachMatch(element, pushMatches);\n          var actionInfo = validateSelector(interaction, pointer, event, matches, matchElements, eventTarget);\n\n          if (actionInfo.action && !actionInfo.target.options[actionInfo.action.name].manualStart) {\n            return actionInfo;\n          }\n\n          element = utils.parentNode(element);\n        }\n\n        return {};\n      }\n\n      function prepare(interaction, _ref3) {\n        var action = _ref3.action,\n            target = _ref3.target,\n            element = _ref3.element;\n        action = action || {};\n\n        if (interaction.target && interaction.target.options.styleCursor) {\n          interaction.target._doc.documentElement.style.cursor = '';\n        }\n\n        interaction.target = target;\n        interaction.element = element;\n        utils.copyAction(interaction.prepared, action);\n\n        if (target && target.options.styleCursor) {\n          var cursor = action ? actions[action.name].getCursor(action) : '';\n          interaction.target._doc.documentElement.style.cursor = cursor;\n        }\n\n        signals.fire('prepared', {\n          interaction: interaction\n        });\n      }\n\n      Interaction.signals.on('stop', function (_ref4) {\n        var interaction = _ref4.interaction;\n        var target = interaction.target;\n\n        if (target && target.options.styleCursor) {\n          target._doc.documentElement.style.cursor = '';\n        }\n      });\n\n      function withinInteractionLimit(interactable, element, action) {\n        var options = interactable.options;\n        var maxActions = options[action.name].max;\n        var maxPerElement = options[action.name].maxPerElement;\n        var activeInteractions = 0;\n        var targetCount = 0;\n        var targetElementCount = 0; // no actions if any of these values == 0\n\n        if (!(maxActions && maxPerElement && autoStart.maxInteractions)) {\n          return;\n        }\n\n        for (var _i = 0; _i < scope.interactions.length; _i++) {\n          var _ref5;\n\n          _ref5 = scope.interactions[_i];\n          var interaction = _ref5;\n          var otherAction = interaction.prepared.name;\n\n          if (!interaction.interacting()) {\n            continue;\n          }\n\n          activeInteractions++;\n\n          if (activeInteractions >= autoStart.maxInteractions) {\n            return false;\n          }\n\n          if (interaction.target !== interactable) {\n            continue;\n          }\n\n          targetCount += otherAction === action.name | 0;\n\n          if (targetCount >= maxActions) {\n            return false;\n          }\n\n          if (interaction.element === element) {\n            targetElementCount++;\n\n            if (otherAction !== action.name || targetElementCount >= maxPerElement) {\n              return false;\n            }\n          }\n        }\n\n        return autoStart.maxInteractions > 0;\n      }\n      /**\n       * Returns or sets the maximum number of concurrent interactions allowed.  By\n       * default only 1 interaction is allowed at a time (for backwards\n       * compatibility). To allow multiple interactions on the same Interactables and\n       * elements, you need to enable it in the draggable, resizable and gesturable\n       * `'max'` and `'maxPerElement'` options.\n       *\n       * @alias module:interact.maxInteractions\n       *\n       * @param {number} [newValue] Any number. newValue <= 0 means no interactions.\n       */\n\n\n      interact.maxInteractions = function (newValue) {\n        if (utils.is.number(newValue)) {\n          autoStart.maxInteractions = newValue;\n          return interact;\n        }\n\n        return autoStart.maxInteractions;\n      };\n\n      Interactable.settingsMethods.push('styleCursor');\n      Interactable.settingsMethods.push('actionChecker');\n      Interactable.settingsMethods.push('ignoreFrom');\n      Interactable.settingsMethods.push('allowFrom');\n      defaultOptions.base.actionChecker = null;\n      defaultOptions.base.styleCursor = true;\n      utils.extend(defaultOptions.perAction, autoStart.defaults.perAction);\n      module.exports = autoStart;\n    }, {\n      \"../Interactable\": 4,\n      \"../Interaction\": 5,\n      \"../actions/base\": 6,\n      \"../defaultOptions\": 18,\n      \"../interact\": 21,\n      \"../scope\": 33,\n      \"../utils\": 44,\n      \"../utils/Signals\": 34,\n      \"./InteractableMethods\": 12\n    }],\n    14: [function (require, module, exports) {\n      'use strict';\n\n      var autoStart = require('./base');\n\n      var scope = require('../scope');\n\n      var is = require('../utils/is');\n\n      var _require = require('../utils/domUtils'),\n          parentNode = _require.parentNode;\n\n      autoStart.setActionDefaults(require('../actions/drag'));\n      autoStart.signals.on('before-start', function (_ref) {\n        var interaction = _ref.interaction,\n            eventTarget = _ref.eventTarget,\n            dx = _ref.dx,\n            dy = _ref.dy;\n\n        if (interaction.prepared.name !== 'drag') {\n          return;\n        } // check if a drag is in the correct axis\n\n\n        var absX = Math.abs(dx);\n        var absY = Math.abs(dy);\n        var targetOptions = interaction.target.options.drag;\n        var startAxis = targetOptions.startAxis;\n        var currentAxis = absX > absY ? 'x' : absX < absY ? 'y' : 'xy';\n        interaction.prepared.axis = targetOptions.lockAxis === 'start' ? currentAxis[0] // always lock to one axis even if currentAxis === 'xy'\n        : targetOptions.lockAxis; // if the movement isn't in the startAxis of the interactable\n\n        if (currentAxis !== 'xy' && startAxis !== 'xy' && startAxis !== currentAxis) {\n          // cancel the prepared action\n          interaction.prepared.name = null; // then try to get a drag from another ineractable\n\n          var element = eventTarget;\n\n          var getDraggable = function getDraggable(interactable) {\n            if (interactable === interaction.target) {\n              return;\n            }\n\n            var options = interaction.target.options.drag;\n\n            if (!options.manualStart && interactable.testIgnoreAllow(options, element, eventTarget)) {\n              var action = interactable.getAction(interaction.downPointer, interaction.downEvent, interaction, element);\n\n              if (action && action.name === 'drag' && checkStartAxis(currentAxis, interactable) && autoStart.validateAction(action, interactable, element, eventTarget)) {\n                return interactable;\n              }\n            }\n          }; // check all interactables\n\n\n          while (is.element(element)) {\n            var interactable = scope.interactables.forEachMatch(element, getDraggable);\n\n            if (interactable) {\n              interaction.prepared.name = 'drag';\n              interaction.target = interactable;\n              interaction.element = element;\n              break;\n            }\n\n            element = parentNode(element);\n          }\n        }\n      });\n\n      function checkStartAxis(startAxis, interactable) {\n        if (!interactable) {\n          return false;\n        }\n\n        var thisAxis = interactable.options.drag.startAxis;\n        return startAxis === 'xy' || thisAxis === 'xy' || thisAxis === startAxis;\n      }\n    }, {\n      \"../actions/drag\": 7,\n      \"../scope\": 33,\n      \"../utils/domUtils\": 39,\n      \"../utils/is\": 46,\n      \"./base\": 13\n    }],\n    15: [function (require, module, exports) {\n      'use strict';\n\n      require('./base').setActionDefaults(require('../actions/gesture'));\n    }, {\n      \"../actions/gesture\": 9,\n      \"./base\": 13\n    }],\n    16: [function (require, module, exports) {\n      'use strict';\n\n      var autoStart = require('./base');\n\n      var Interaction = require('../Interaction');\n\n      autoStart.defaults.perAction.hold = 0;\n      autoStart.defaults.perAction.delay = 0;\n      Interaction.signals.on('new', function (interaction) {\n        interaction.autoStartHoldTimer = null;\n      });\n      autoStart.signals.on('prepared', function (_ref) {\n        var interaction = _ref.interaction;\n        var hold = getHoldDuration(interaction);\n\n        if (hold > 0) {\n          interaction.autoStartHoldTimer = setTimeout(function () {\n            interaction.start(interaction.prepared, interaction.target, interaction.element);\n          }, hold);\n        }\n      });\n      Interaction.signals.on('move', function (_ref2) {\n        var interaction = _ref2.interaction,\n            duplicate = _ref2.duplicate;\n\n        if (interaction.pointerWasMoved && !duplicate) {\n          clearTimeout(interaction.autoStartHoldTimer);\n        }\n      }); // prevent regular down->move autoStart\n\n      autoStart.signals.on('before-start', function (_ref3) {\n        var interaction = _ref3.interaction;\n        var hold = getHoldDuration(interaction);\n\n        if (hold > 0) {\n          interaction.prepared.name = null;\n        }\n      });\n\n      function getHoldDuration(interaction) {\n        var actionName = interaction.prepared && interaction.prepared.name;\n\n        if (!actionName) {\n          return null;\n        }\n\n        var options = interaction.target.options;\n        return options[actionName].hold || options[actionName].delay;\n      }\n\n      module.exports = {\n        getHoldDuration: getHoldDuration\n      };\n    }, {\n      \"../Interaction\": 5,\n      \"./base\": 13\n    }],\n    17: [function (require, module, exports) {\n      'use strict';\n\n      require('./base').setActionDefaults(require('../actions/resize'));\n    }, {\n      \"../actions/resize\": 10,\n      \"./base\": 13\n    }],\n    18: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = {\n        base: {\n          accept: null,\n          preventDefault: 'auto',\n          deltaSource: 'page'\n        },\n        perAction: {\n          origin: {\n            x: 0,\n            y: 0\n          },\n          inertia: {\n            enabled: false,\n            resistance: 10,\n            // the lambda in exponential decay\n            minSpeed: 100,\n            // target speed must be above this for inertia to start\n            endSpeed: 10,\n            // the speed at which inertia is slow enough to stop\n            allowResume: true,\n            // allow resuming an action in inertia phase\n            smoothEndDuration: 300 // animate to snap/restrict endOnly if there's no inertia\n\n          }\n        }\n      };\n    }, {}],\n    19: [function (require, module, exports) {\n      'use strict';\n      /* browser entry point */\n      // inertia\n\n      require('./inertia'); // modifiers\n\n\n      require('./modifiers/snap');\n\n      require('./modifiers/restrict'); // pointerEvents\n\n\n      require('./pointerEvents/base');\n\n      require('./pointerEvents/holdRepeat');\n\n      require('./pointerEvents/interactableTargets'); // autoStart hold\n\n\n      require('./autoStart/hold'); // actions\n\n\n      require('./actions/gesture');\n\n      require('./actions/resize');\n\n      require('./actions/drag');\n\n      require('./actions/drop'); // load these modifiers after resize is loaded\n\n\n      require('./modifiers/snapSize');\n\n      require('./modifiers/restrictEdges');\n\n      require('./modifiers/restrictSize'); // autoStart actions\n\n\n      require('./autoStart/gesture');\n\n      require('./autoStart/resize');\n\n      require('./autoStart/drag'); // Interactable preventDefault setting\n\n\n      require('./interactablePreventDefault.js'); // autoScroll\n\n\n      require('./autoScroll'); // export interact\n\n\n      module.exports = require('./interact');\n    }, {\n      \"./actions/drag\": 7,\n      \"./actions/drop\": 8,\n      \"./actions/gesture\": 9,\n      \"./actions/resize\": 10,\n      \"./autoScroll\": 11,\n      \"./autoStart/drag\": 14,\n      \"./autoStart/gesture\": 15,\n      \"./autoStart/hold\": 16,\n      \"./autoStart/resize\": 17,\n      \"./inertia\": 20,\n      \"./interact\": 21,\n      \"./interactablePreventDefault.js\": 22,\n      \"./modifiers/restrict\": 24,\n      \"./modifiers/restrictEdges\": 25,\n      \"./modifiers/restrictSize\": 26,\n      \"./modifiers/snap\": 27,\n      \"./modifiers/snapSize\": 28,\n      \"./pointerEvents/base\": 30,\n      \"./pointerEvents/holdRepeat\": 31,\n      \"./pointerEvents/interactableTargets\": 32\n    }],\n    20: [function (require, module, exports) {\n      'use strict';\n\n      var InteractEvent = require('./InteractEvent');\n\n      var Interaction = require('./Interaction');\n\n      var modifiers = require('./modifiers/base');\n\n      var utils = require('./utils');\n\n      var animationFrame = require('./utils/raf');\n\n      Interaction.signals.on('new', function (interaction) {\n        interaction.inertiaStatus = {\n          active: false,\n          smoothEnd: false,\n          allowResume: false,\n          startEvent: null,\n          upCoords: {},\n          xe: 0,\n          ye: 0,\n          sx: 0,\n          sy: 0,\n          t0: 0,\n          vx0: 0,\n          vys: 0,\n          duration: 0,\n          lambda_v0: 0,\n          one_ve_v0: 0,\n          i: null\n        };\n\n        interaction.boundInertiaFrame = function () {\n          return inertiaFrame.apply(interaction);\n        };\n\n        interaction.boundSmoothEndFrame = function () {\n          return smoothEndFrame.apply(interaction);\n        };\n      });\n      Interaction.signals.on('down', function (_ref) {\n        var interaction = _ref.interaction,\n            event = _ref.event,\n            pointer = _ref.pointer,\n            eventTarget = _ref.eventTarget;\n        var status = interaction.inertiaStatus; // Check if the down event hits the current inertia target\n\n        if (status.active) {\n          var element = eventTarget; // climb up the DOM tree from the event target\n\n          while (utils.is.element(element)) {\n            // if interaction element is the current inertia target element\n            if (element === interaction.element) {\n              // stop inertia\n              animationFrame.cancel(status.i);\n              status.active = false;\n              interaction.simulation = null; // update pointers to the down event's coordinates\n\n              interaction.updatePointer(pointer);\n              utils.setCoords(interaction.curCoords, interaction.pointers); // fire appropriate signals\n\n              var signalArg = {\n                interaction: interaction\n              };\n              Interaction.signals.fire('before-action-move', signalArg);\n              Interaction.signals.fire('action-resume', signalArg); // fire a reume event\n\n              var resumeEvent = new InteractEvent(interaction, event, interaction.prepared.name, 'inertiaresume', interaction.element);\n              interaction.target.fire(resumeEvent);\n              interaction.prevEvent = resumeEvent;\n              modifiers.resetStatuses(interaction.modifierStatuses);\n              utils.copyCoords(interaction.prevCoords, interaction.curCoords);\n              break;\n            }\n\n            element = utils.parentNode(element);\n          }\n        }\n      });\n      Interaction.signals.on('up', function (_ref2) {\n        var interaction = _ref2.interaction,\n            event = _ref2.event;\n        var status = interaction.inertiaStatus;\n\n        if (!interaction.interacting() || status.active) {\n          return;\n        }\n\n        var target = interaction.target;\n        var options = target && target.options;\n        var inertiaOptions = options && interaction.prepared.name && options[interaction.prepared.name].inertia;\n        var now = new Date().getTime();\n        var statuses = {};\n        var page = utils.extend({}, interaction.curCoords.page);\n        var pointerSpeed = interaction.pointerDelta.client.speed;\n        var smoothEnd = false;\n        var modifierResult = void 0; // check if inertia should be started\n\n        var inertiaPossible = inertiaOptions && inertiaOptions.enabled && interaction.prepared.name !== 'gesture' && event !== status.startEvent;\n        var inertia = inertiaPossible && now - interaction.curCoords.timeStamp < 50 && pointerSpeed > inertiaOptions.minSpeed && pointerSpeed > inertiaOptions.endSpeed;\n        var modifierArg = {\n          interaction: interaction,\n          pageCoords: page,\n          statuses: statuses,\n          preEnd: true,\n          requireEndOnly: true\n        }; // smoothEnd\n\n        if (inertiaPossible && !inertia) {\n          modifiers.resetStatuses(statuses);\n          modifierResult = modifiers.setAll(modifierArg);\n\n          if (modifierResult.shouldMove && modifierResult.locked) {\n            smoothEnd = true;\n          }\n        }\n\n        if (!(inertia || smoothEnd)) {\n          return;\n        }\n\n        utils.copyCoords(status.upCoords, interaction.curCoords);\n        interaction.pointers[0] = status.startEvent = new InteractEvent(interaction, event, interaction.prepared.name, 'inertiastart', interaction.element);\n        status.t0 = now;\n        status.active = true;\n        status.allowResume = inertiaOptions.allowResume;\n        interaction.simulation = status;\n        target.fire(status.startEvent);\n\n        if (inertia) {\n          status.vx0 = interaction.pointerDelta.client.vx;\n          status.vy0 = interaction.pointerDelta.client.vy;\n          status.v0 = pointerSpeed;\n          calcInertia(interaction, status);\n          utils.extend(page, interaction.curCoords.page);\n          page.x += status.xe;\n          page.y += status.ye;\n          modifiers.resetStatuses(statuses);\n          modifierResult = modifiers.setAll(modifierArg);\n          status.modifiedXe += modifierResult.dx;\n          status.modifiedYe += modifierResult.dy;\n          status.i = animationFrame.request(interaction.boundInertiaFrame);\n        } else {\n          status.smoothEnd = true;\n          status.xe = modifierResult.dx;\n          status.ye = modifierResult.dy;\n          status.sx = status.sy = 0;\n          status.i = animationFrame.request(interaction.boundSmoothEndFrame);\n        }\n      });\n      Interaction.signals.on('stop-active', function (_ref3) {\n        var interaction = _ref3.interaction;\n        var status = interaction.inertiaStatus;\n\n        if (status.active) {\n          animationFrame.cancel(status.i);\n          status.active = false;\n          interaction.simulation = null;\n        }\n      });\n\n      function calcInertia(interaction, status) {\n        var inertiaOptions = interaction.target.options[interaction.prepared.name].inertia;\n        var lambda = inertiaOptions.resistance;\n        var inertiaDur = -Math.log(inertiaOptions.endSpeed / status.v0) / lambda;\n        status.x0 = interaction.prevEvent.pageX;\n        status.y0 = interaction.prevEvent.pageY;\n        status.t0 = status.startEvent.timeStamp / 1000;\n        status.sx = status.sy = 0;\n        status.modifiedXe = status.xe = (status.vx0 - inertiaDur) / lambda;\n        status.modifiedYe = status.ye = (status.vy0 - inertiaDur) / lambda;\n        status.te = inertiaDur;\n        status.lambda_v0 = lambda / status.v0;\n        status.one_ve_v0 = 1 - inertiaOptions.endSpeed / status.v0;\n      }\n\n      function inertiaFrame() {\n        updateInertiaCoords(this);\n        utils.setCoordDeltas(this.pointerDelta, this.prevCoords, this.curCoords);\n        var status = this.inertiaStatus;\n        var options = this.target.options[this.prepared.name].inertia;\n        var lambda = options.resistance;\n        var t = new Date().getTime() / 1000 - status.t0;\n\n        if (t < status.te) {\n          var progress = 1 - (Math.exp(-lambda * t) - status.lambda_v0) / status.one_ve_v0;\n\n          if (status.modifiedXe === status.xe && status.modifiedYe === status.ye) {\n            status.sx = status.xe * progress;\n            status.sy = status.ye * progress;\n          } else {\n            var quadPoint = utils.getQuadraticCurvePoint(0, 0, status.xe, status.ye, status.modifiedXe, status.modifiedYe, progress);\n            status.sx = quadPoint.x;\n            status.sy = quadPoint.y;\n          }\n\n          this.doMove();\n          status.i = animationFrame.request(this.boundInertiaFrame);\n        } else {\n          status.sx = status.modifiedXe;\n          status.sy = status.modifiedYe;\n          this.doMove();\n          this.end(status.startEvent);\n          status.active = false;\n          this.simulation = null;\n        }\n\n        utils.copyCoords(this.prevCoords, this.curCoords);\n      }\n\n      function smoothEndFrame() {\n        updateInertiaCoords(this);\n        var status = this.inertiaStatus;\n        var t = new Date().getTime() - status.t0;\n        var duration = this.target.options[this.prepared.name].inertia.smoothEndDuration;\n\n        if (t < duration) {\n          status.sx = utils.easeOutQuad(t, 0, status.xe, duration);\n          status.sy = utils.easeOutQuad(t, 0, status.ye, duration);\n          this.pointerMove(status.startEvent, status.startEvent);\n          status.i = animationFrame.request(this.boundSmoothEndFrame);\n        } else {\n          status.sx = status.xe;\n          status.sy = status.ye;\n          this.pointerMove(status.startEvent, status.startEvent);\n          this.end(status.startEvent);\n          status.smoothEnd = status.active = false;\n          this.simulation = null;\n        }\n      }\n\n      function updateInertiaCoords(interaction) {\n        var status = interaction.inertiaStatus; // return if inertia isn't running\n\n        if (!status.active) {\n          return;\n        }\n\n        var pageUp = status.upCoords.page;\n        var clientUp = status.upCoords.client;\n        utils.setCoords(interaction.curCoords, [{\n          pageX: pageUp.x + status.sx,\n          pageY: pageUp.y + status.sy,\n          clientX: clientUp.x + status.sx,\n          clientY: clientUp.y + status.sy\n        }]);\n      }\n    }, {\n      \"./InteractEvent\": 3,\n      \"./Interaction\": 5,\n      \"./modifiers/base\": 23,\n      \"./utils\": 44,\n      \"./utils/raf\": 50\n    }],\n    21: [function (require, module, exports) {\n      'use strict';\n      /** @module interact */\n\n      var browser = require('./utils/browser');\n\n      var events = require('./utils/events');\n\n      var utils = require('./utils');\n\n      var scope = require('./scope');\n\n      var Interactable = require('./Interactable');\n\n      var Interaction = require('./Interaction');\n\n      var globalEvents = {};\n      /**\n       * ```js\n       * interact('#draggable').draggable(true);\n       *\n       * var rectables = interact('rect');\n       * rectables\n       *   .gesturable(true)\n       *   .on('gesturemove', function (event) {\n       *       // ...\n       *   });\n       * ```\n       *\n       * The methods of this variable can be used to set elements as interactables\n       * and also to change various default settings.\n       *\n       * Calling it as a function and passing an element or a valid CSS selector\n       * string returns an Interactable object which has various methods to configure\n       * it.\n       *\n       * @global\n       *\n       * @param {Element | string} element The HTML or SVG Element to interact with\n       * or CSS selector\n       * @return {Interactable}\n       */\n\n      function interact(element, options) {\n        var interactable = scope.interactables.get(element, options);\n\n        if (!interactable) {\n          interactable = new Interactable(element, options);\n          interactable.events.global = globalEvents;\n        }\n\n        return interactable;\n      }\n      /**\n       * Check if an element or selector has been set with the {@link interact}\n       * function\n       *\n       * @alias module:interact.isSet\n       *\n       * @param {Element} element The Element being searched for\n       * @return {boolean} Indicates if the element or CSS selector was previously\n       * passed to interact\n      */\n\n\n      interact.isSet = function (element, options) {\n        return scope.interactables.indexOfElement(element, options && options.context) !== -1;\n      };\n      /**\n       * Add a global listener for an InteractEvent or adds a DOM event to `document`\n       *\n       * @alias module:interact.on\n       *\n       * @param {string | array | object} type The types of events to listen for\n       * @param {function} listener The function event (s)\n       * @param {object | boolean} [options] object or useCapture flag for\n       * addEventListener\n       * @return {object} interact\n       */\n\n\n      interact.on = function (type, listener, options) {\n        if (utils.is.string(type) && type.search(' ') !== -1) {\n          type = type.trim().split(/ +/);\n        }\n\n        if (utils.is.array(type)) {\n          for (var _i = 0; _i < type.length; _i++) {\n            var _ref;\n\n            _ref = type[_i];\n            var eventType = _ref;\n            interact.on(eventType, listener, options);\n          }\n\n          return interact;\n        }\n\n        if (utils.is.object(type)) {\n          for (var prop in type) {\n            interact.on(prop, type[prop], listener);\n          }\n\n          return interact;\n        } // if it is an InteractEvent type, add listener to globalEvents\n\n\n        if (utils.contains(Interactable.eventTypes, type)) {\n          // if this type of event was never bound\n          if (!globalEvents[type]) {\n            globalEvents[type] = [listener];\n          } else {\n            globalEvents[type].push(listener);\n          }\n        } // If non InteractEvent type, addEventListener to document\n        else {\n            events.add(scope.document, type, listener, {\n              options: options\n            });\n          }\n\n        return interact;\n      };\n      /**\n       * Removes a global InteractEvent listener or DOM event from `document`\n       *\n       * @alias module:interact.off\n       *\n       * @param {string | array | object} type The types of events that were listened\n       * for\n       * @param {function} listener The listener function to be removed\n       * @param {object | boolean} options [options] object or useCapture flag for\n       * removeEventListener\n       * @return {object} interact\n       */\n\n\n      interact.off = function (type, listener, options) {\n        if (utils.is.string(type) && type.search(' ') !== -1) {\n          type = type.trim().split(/ +/);\n        }\n\n        if (utils.is.array(type)) {\n          for (var _i2 = 0; _i2 < type.length; _i2++) {\n            var _ref2;\n\n            _ref2 = type[_i2];\n            var eventType = _ref2;\n            interact.off(eventType, listener, options);\n          }\n\n          return interact;\n        }\n\n        if (utils.is.object(type)) {\n          for (var prop in type) {\n            interact.off(prop, type[prop], listener);\n          }\n\n          return interact;\n        }\n\n        if (!utils.contains(Interactable.eventTypes, type)) {\n          events.remove(scope.document, type, listener, options);\n        } else {\n          var index = void 0;\n\n          if (type in globalEvents && (index = globalEvents[type].indexOf(listener)) !== -1) {\n            globalEvents[type].splice(index, 1);\n          }\n        }\n\n        return interact;\n      };\n      /**\n       * Returns an object which exposes internal data\n      \n       * @alias module:interact.debug\n       *\n       * @return {object} An object with properties that outline the current state\n       * and expose internal functions and variables\n       */\n\n\n      interact.debug = function () {\n        return scope;\n      }; // expose the functions used to calculate multi-touch properties\n\n\n      interact.getPointerAverage = utils.pointerAverage;\n      interact.getTouchBBox = utils.touchBBox;\n      interact.getTouchDistance = utils.touchDistance;\n      interact.getTouchAngle = utils.touchAngle;\n      interact.getElementRect = utils.getElementRect;\n      interact.getElementClientRect = utils.getElementClientRect;\n      interact.matchesSelector = utils.matchesSelector;\n      interact.closest = utils.closest;\n      /**\n       * @alias module:interact.supportsTouch\n       *\n       * @return {boolean} Whether or not the browser supports touch input\n       */\n\n      interact.supportsTouch = function () {\n        return browser.supportsTouch;\n      };\n      /**\n       * @alias module:interact.supportsPointerEvent\n       *\n       * @return {boolean} Whether or not the browser supports PointerEvents\n       */\n\n\n      interact.supportsPointerEvent = function () {\n        return browser.supportsPointerEvent;\n      };\n      /**\n       * Cancels all interactions (end events are not fired)\n       *\n       * @alias module:interact.stop\n       *\n       * @param {Event} event An event on which to call preventDefault()\n       * @return {object} interact\n       */\n\n\n      interact.stop = function (event) {\n        for (var i = scope.interactions.length - 1; i >= 0; i--) {\n          scope.interactions[i].stop(event);\n        }\n\n        return interact;\n      };\n      /**\n       * Returns or sets the distance the pointer must be moved before an action\n       * sequence occurs. This also affects tolerance for tap events.\n       *\n       * @alias module:interact.pointerMoveTolerance\n       *\n       * @param {number} [newValue] The movement from the start position must be greater than this value\n       * @return {interact | number}\n       */\n\n\n      interact.pointerMoveTolerance = function (newValue) {\n        if (utils.is.number(newValue)) {\n          Interaction.pointerMoveTolerance = newValue;\n          return interact;\n        }\n\n        return Interaction.pointerMoveTolerance;\n      };\n\n      interact.addDocument = scope.addDocument;\n      interact.removeDocument = scope.removeDocument;\n      scope.interact = interact;\n      module.exports = interact;\n    }, {\n      \"./Interactable\": 4,\n      \"./Interaction\": 5,\n      \"./scope\": 33,\n      \"./utils\": 44,\n      \"./utils/browser\": 36,\n      \"./utils/events\": 40\n    }],\n    22: [function (require, module, exports) {\n      'use strict';\n\n      var Interactable = require('./Interactable');\n\n      var Interaction = require('./Interaction');\n\n      var scope = require('./scope');\n\n      var is = require('./utils/is');\n\n      var events = require('./utils/events');\n\n      var browser = require('./utils/browser');\n\n      var _require = require('./utils/domUtils'),\n          nodeContains = _require.nodeContains,\n          matchesSelector = _require.matchesSelector;\n      /**\n       * Returns or sets whether to prevent the browser's default behaviour in\n       * response to pointer events. Can be set to:\n       *  - `'always'` to always prevent\n       *  - `'never'` to never prevent\n       *  - `'auto'` to let interact.js try to determine what would be best\n       *\n       * @param {string} [newValue] `true`, `false` or `'auto'`\n       * @return {string | Interactable} The current setting or this Interactable\n       */\n\n\n      Interactable.prototype.preventDefault = function (newValue) {\n        if (/^(always|never|auto)$/.test(newValue)) {\n          this.options.preventDefault = newValue;\n          return this;\n        }\n\n        if (is.bool(newValue)) {\n          this.options.preventDefault = newValue ? 'always' : 'never';\n          return this;\n        }\n\n        return this.options.preventDefault;\n      };\n\n      Interactable.prototype.checkAndPreventDefault = function (event) {\n        var setting = this.options.preventDefault;\n\n        if (setting === 'never') {\n          return;\n        }\n\n        if (setting === 'always') {\n          event.preventDefault();\n          return;\n        } // setting === 'auto'\n        // don't preventDefault of touch{start,move} events if the browser supports passive\n        // events listeners. CSS touch-action and user-selecct should be used instead\n\n\n        if (events.supportsPassive && /^touch(start|move)$/.test(event.type) && !browser.isIOS) {\n          return;\n        } // don't preventDefault of pointerdown events\n\n\n        if (/^(mouse|pointer|touch)*(down|start)/i.test(event.type)) {\n          return;\n        } // don't preventDefault on editable elements\n\n\n        if (is.element(event.target) && matchesSelector(event.target, 'input,select,textarea,[contenteditable=true],[contenteditable=true] *')) {\n          return;\n        }\n\n        event.preventDefault();\n      };\n\n      function onInteractionEvent(_ref) {\n        var interaction = _ref.interaction,\n            event = _ref.event;\n\n        if (interaction.target) {\n          interaction.target.checkAndPreventDefault(event);\n        }\n      }\n\n      var _arr = ['down', 'move', 'up', 'cancel'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var eventSignal = _arr[_i];\n        Interaction.signals.on(eventSignal, onInteractionEvent);\n      } // prevent native HTML5 drag on interact.js target elements\n\n\n      Interaction.docEvents.dragstart = function preventNativeDrag(event) {\n        for (var _i2 = 0; _i2 < scope.interactions.length; _i2++) {\n          var _ref2;\n\n          _ref2 = scope.interactions[_i2];\n          var interaction = _ref2;\n\n          if (interaction.element && (interaction.element === event.target || nodeContains(interaction.element, event.target))) {\n            interaction.target.checkAndPreventDefault(event);\n            return;\n          }\n        }\n      };\n    }, {\n      \"./Interactable\": 4,\n      \"./Interaction\": 5,\n      \"./scope\": 33,\n      \"./utils/browser\": 36,\n      \"./utils/domUtils\": 39,\n      \"./utils/events\": 40,\n      \"./utils/is\": 46\n    }],\n    23: [function (require, module, exports) {\n      'use strict';\n\n      var InteractEvent = require('../InteractEvent');\n\n      var Interaction = require('../Interaction');\n\n      var extend = require('../utils/extend');\n\n      var modifiers = {\n        names: [],\n        setOffsets: function setOffsets(arg) {\n          var interaction = arg.interaction,\n              page = arg.pageCoords;\n          var target = interaction.target,\n              element = interaction.element,\n              startOffset = interaction.startOffset;\n          var rect = target.getRect(element);\n\n          if (rect) {\n            startOffset.left = page.x - rect.left;\n            startOffset.top = page.y - rect.top;\n            startOffset.right = rect.right - page.x;\n            startOffset.bottom = rect.bottom - page.y;\n\n            if (!('width' in rect)) {\n              rect.width = rect.right - rect.left;\n            }\n\n            if (!('height' in rect)) {\n              rect.height = rect.bottom - rect.top;\n            }\n          } else {\n            startOffset.left = startOffset.top = startOffset.right = startOffset.bottom = 0;\n          }\n\n          arg.rect = rect;\n          arg.interactable = target;\n          arg.element = element;\n\n          for (var _i = 0; _i < modifiers.names.length; _i++) {\n            var _ref;\n\n            _ref = modifiers.names[_i];\n            var modifierName = _ref;\n            arg.options = target.options[interaction.prepared.name][modifierName];\n\n            if (!arg.options) {\n              continue;\n            }\n\n            interaction.modifierOffsets[modifierName] = modifiers[modifierName].setOffset(arg);\n          }\n        },\n        setAll: function setAll(arg) {\n          var interaction = arg.interaction,\n              statuses = arg.statuses,\n              preEnd = arg.preEnd,\n              requireEndOnly = arg.requireEndOnly;\n          var result = {\n            dx: 0,\n            dy: 0,\n            changed: false,\n            locked: false,\n            shouldMove: true\n          };\n          arg.modifiedCoords = extend({}, arg.pageCoords);\n\n          for (var _i2 = 0; _i2 < modifiers.names.length; _i2++) {\n            var _ref2;\n\n            _ref2 = modifiers.names[_i2];\n            var modifierName = _ref2;\n            var modifier = modifiers[modifierName];\n            var options = interaction.target.options[interaction.prepared.name][modifierName];\n\n            if (!shouldDo(options, preEnd, requireEndOnly)) {\n              continue;\n            }\n\n            arg.status = arg.status = statuses[modifierName];\n            arg.options = options;\n            arg.offset = arg.interaction.modifierOffsets[modifierName];\n            modifier.set(arg);\n\n            if (arg.status.locked) {\n              arg.modifiedCoords.x += arg.status.dx;\n              arg.modifiedCoords.y += arg.status.dy;\n              result.dx += arg.status.dx;\n              result.dy += arg.status.dy;\n              result.locked = true;\n            }\n          } // a move should be fired if:\n          //  - there are no modifiers enabled,\n          //  - no modifiers are \"locked\" i.e. have changed the pointer's coordinates, or\n          //  - the locked coords have changed since the last pointer move\n\n\n          result.shouldMove = !arg.status || !result.locked || arg.status.changed;\n          return result;\n        },\n        resetStatuses: function resetStatuses(statuses) {\n          for (var _i3 = 0; _i3 < modifiers.names.length; _i3++) {\n            var _ref3;\n\n            _ref3 = modifiers.names[_i3];\n            var modifierName = _ref3;\n            var status = statuses[modifierName] || {};\n            status.dx = status.dy = 0;\n            status.modifiedX = status.modifiedY = NaN;\n            status.locked = false;\n            status.changed = true;\n            statuses[modifierName] = status;\n          }\n\n          return statuses;\n        },\n        start: function start(_ref4, signalName) {\n          var interaction = _ref4.interaction;\n          var arg = {\n            interaction: interaction,\n            pageCoords: (signalName === 'action-resume' ? interaction.curCoords : interaction.startCoords).page,\n            startOffset: interaction.startOffset,\n            statuses: interaction.modifierStatuses,\n            preEnd: false,\n            requireEndOnly: false\n          };\n          modifiers.setOffsets(arg);\n          modifiers.resetStatuses(arg.statuses);\n          arg.pageCoords = extend({}, interaction.startCoords.page);\n          interaction.modifierResult = modifiers.setAll(arg);\n        },\n        beforeMove: function beforeMove(_ref5) {\n          var interaction = _ref5.interaction,\n              preEnd = _ref5.preEnd,\n              interactingBeforeMove = _ref5.interactingBeforeMove;\n          var modifierResult = modifiers.setAll({\n            interaction: interaction,\n            preEnd: preEnd,\n            pageCoords: interaction.curCoords.page,\n            statuses: interaction.modifierStatuses,\n            requireEndOnly: false\n          }); // don't fire an action move if a modifier would keep the event in the same\n          // cordinates as before\n\n          if (!modifierResult.shouldMove && interactingBeforeMove) {\n            interaction._dontFireMove = true;\n          }\n\n          interaction.modifierResult = modifierResult;\n        },\n        end: function end(_ref6) {\n          var interaction = _ref6.interaction,\n              event = _ref6.event;\n\n          for (var _i4 = 0; _i4 < modifiers.names.length; _i4++) {\n            var _ref7;\n\n            _ref7 = modifiers.names[_i4];\n            var modifierName = _ref7;\n            var options = interaction.target.options[interaction.prepared.name][modifierName]; // if the endOnly option is true for any modifier\n\n            if (shouldDo(options, true, true)) {\n              // fire a move event at the modified coordinates\n              interaction.doMove({\n                event: event,\n                preEnd: true\n              });\n              break;\n            }\n          }\n        },\n        setXY: function setXY(arg) {\n          var iEvent = arg.iEvent,\n              interaction = arg.interaction;\n          var modifierArg = extend({}, arg);\n\n          for (var i = 0; i < modifiers.names.length; i++) {\n            var modifierName = modifiers.names[i];\n            modifierArg.options = interaction.target.options[interaction.prepared.name][modifierName];\n\n            if (!modifierArg.options) {\n              continue;\n            }\n\n            var modifier = modifiers[modifierName];\n            modifierArg.status = interaction.modifierStatuses[modifierName];\n            iEvent[modifierName] = modifier.modifyCoords(modifierArg);\n          }\n        }\n      };\n      Interaction.signals.on('new', function (interaction) {\n        interaction.startOffset = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        };\n        interaction.modifierOffsets = {};\n        interaction.modifierStatuses = modifiers.resetStatuses({});\n        interaction.modifierResult = null;\n      });\n      Interaction.signals.on('action-start', modifiers.start);\n      Interaction.signals.on('action-resume', modifiers.start);\n      Interaction.signals.on('before-action-move', modifiers.beforeMove);\n      Interaction.signals.on('action-end', modifiers.end);\n      InteractEvent.signals.on('set-xy', modifiers.setXY);\n\n      function shouldDo(options, preEnd, requireEndOnly) {\n        return options && options.enabled && (preEnd || !options.endOnly) && (!requireEndOnly || options.endOnly);\n      }\n\n      module.exports = modifiers;\n    }, {\n      \"../InteractEvent\": 3,\n      \"../Interaction\": 5,\n      \"../utils/extend\": 41\n    }],\n    24: [function (require, module, exports) {\n      'use strict';\n\n      var modifiers = require('./base');\n\n      var utils = require('../utils');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var restrict = {\n        defaults: {\n          enabled: false,\n          endOnly: false,\n          restriction: null,\n          elementRect: null\n        },\n        setOffset: function setOffset(_ref) {\n          var rect = _ref.rect,\n              startOffset = _ref.startOffset,\n              options = _ref.options;\n          var elementRect = options && options.elementRect;\n          var offset = {};\n\n          if (rect && elementRect) {\n            offset.left = startOffset.left - rect.width * elementRect.left;\n            offset.top = startOffset.top - rect.height * elementRect.top;\n            offset.right = startOffset.right - rect.width * (1 - elementRect.right);\n            offset.bottom = startOffset.bottom - rect.height * (1 - elementRect.bottom);\n          } else {\n            offset.left = offset.top = offset.right = offset.bottom = 0;\n          }\n\n          return offset;\n        },\n        set: function set(_ref2) {\n          var modifiedCoords = _ref2.modifiedCoords,\n              interaction = _ref2.interaction,\n              status = _ref2.status,\n              options = _ref2.options;\n\n          if (!options) {\n            return status;\n          }\n\n          var page = status.useStatusXY ? {\n            x: status.x,\n            y: status.y\n          } : utils.extend({}, modifiedCoords);\n          var restriction = getRestrictionRect(options.restriction, interaction, page);\n\n          if (!restriction) {\n            return status;\n          }\n\n          status.dx = 0;\n          status.dy = 0;\n          status.locked = false;\n          var rect = restriction;\n          var modifiedX = page.x;\n          var modifiedY = page.y;\n          var offset = interaction.modifierOffsets.restrict; // object is assumed to have\n          // x, y, width, height or\n          // left, top, right, bottom\n\n          if ('x' in restriction && 'y' in restriction) {\n            modifiedX = Math.max(Math.min(rect.x + rect.width - offset.right, page.x), rect.x + offset.left);\n            modifiedY = Math.max(Math.min(rect.y + rect.height - offset.bottom, page.y), rect.y + offset.top);\n          } else {\n            modifiedX = Math.max(Math.min(rect.right - offset.right, page.x), rect.left + offset.left);\n            modifiedY = Math.max(Math.min(rect.bottom - offset.bottom, page.y), rect.top + offset.top);\n          }\n\n          status.dx = modifiedX - page.x;\n          status.dy = modifiedY - page.y;\n          status.changed = status.modifiedX !== modifiedX || status.modifiedY !== modifiedY;\n          status.locked = !!(status.dx || status.dy);\n          status.modifiedX = modifiedX;\n          status.modifiedY = modifiedY;\n        },\n        modifyCoords: function modifyCoords(_ref3) {\n          var page = _ref3.page,\n              client = _ref3.client,\n              status = _ref3.status,\n              phase = _ref3.phase,\n              options = _ref3.options;\n          var elementRect = options && options.elementRect;\n\n          if (options && options.enabled && !(phase === 'start' && elementRect && status.locked)) {\n            if (status.locked) {\n              page.x += status.dx;\n              page.y += status.dy;\n              client.x += status.dx;\n              client.y += status.dy;\n              return {\n                dx: status.dx,\n                dy: status.dy\n              };\n            }\n          }\n        },\n        getRestrictionRect: getRestrictionRect\n      };\n\n      function getRestrictionRect(value, interaction, page) {\n        if (utils.is.function(value)) {\n          return utils.resolveRectLike(value, interaction.target, interaction.element, [page.x, page.y, interaction]);\n        } else {\n          return utils.resolveRectLike(value, interaction.target, interaction.element);\n        }\n      }\n\n      modifiers.restrict = restrict;\n      modifiers.names.push('restrict');\n      defaultOptions.perAction.restrict = restrict.defaults;\n      module.exports = restrict;\n    }, {\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"./base\": 23\n    }],\n    25: [function (require, module, exports) {\n      'use strict'; // This module adds the options.resize.restrictEdges setting which sets min and\n      // max for the top, left, bottom and right edges of the target being resized.\n      //\n      // interact(target).resize({\n      //   edges: { top: true, left: true },\n      //   restrictEdges: {\n      //     inner: { top: 200, left: 200, right: 400, bottom: 400 },\n      //     outer: { top:   0, left:   0, right: 600, bottom: 600 },\n      //   },\n      // });\n\n      var modifiers = require('./base');\n\n      var utils = require('../utils');\n\n      var rectUtils = require('../utils/rect');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var resize = require('../actions/resize');\n\n      var _require = require('./restrict'),\n          getRestrictionRect = _require.getRestrictionRect;\n\n      var noInner = {\n        top: +Infinity,\n        left: +Infinity,\n        bottom: -Infinity,\n        right: -Infinity\n      };\n      var noOuter = {\n        top: -Infinity,\n        left: -Infinity,\n        bottom: +Infinity,\n        right: +Infinity\n      };\n      var restrictEdges = {\n        defaults: {\n          enabled: false,\n          endOnly: false,\n          min: null,\n          max: null,\n          offset: null\n        },\n        setOffset: function setOffset(_ref) {\n          var interaction = _ref.interaction,\n              startOffset = _ref.startOffset,\n              options = _ref.options;\n\n          if (!options) {\n            return utils.extend({}, startOffset);\n          }\n\n          var offset = getRestrictionRect(options.offset, interaction, interaction.startCoords.page);\n\n          if (offset) {\n            return {\n              top: startOffset.top + offset.y,\n              left: startOffset.left + offset.x,\n              bottom: startOffset.bottom + offset.y,\n              right: startOffset.right + offset.x\n            };\n          }\n\n          return startOffset;\n        },\n        set: function set(_ref2) {\n          var modifiedCoords = _ref2.modifiedCoords,\n              interaction = _ref2.interaction,\n              status = _ref2.status,\n              offset = _ref2.offset,\n              options = _ref2.options;\n          var edges = interaction.prepared.linkedEdges || interaction.prepared.edges;\n\n          if (!interaction.interacting() || !edges) {\n            return;\n          }\n\n          var page = status.useStatusXY ? {\n            x: status.x,\n            y: status.y\n          } : utils.extend({}, modifiedCoords);\n          var inner = rectUtils.xywhToTlbr(getRestrictionRect(options.inner, interaction, page)) || noInner;\n          var outer = rectUtils.xywhToTlbr(getRestrictionRect(options.outer, interaction, page)) || noOuter;\n          var modifiedX = page.x;\n          var modifiedY = page.y;\n          status.dx = 0;\n          status.dy = 0;\n          status.locked = false;\n\n          if (edges.top) {\n            modifiedY = Math.min(Math.max(outer.top + offset.top, page.y), inner.top + offset.top);\n          } else if (edges.bottom) {\n            modifiedY = Math.max(Math.min(outer.bottom - offset.bottom, page.y), inner.bottom - offset.bottom);\n          }\n\n          if (edges.left) {\n            modifiedX = Math.min(Math.max(outer.left + offset.left, page.x), inner.left + offset.left);\n          } else if (edges.right) {\n            modifiedX = Math.max(Math.min(outer.right - offset.right, page.x), inner.right - offset.right);\n          }\n\n          status.dx = modifiedX - page.x;\n          status.dy = modifiedY - page.y;\n          status.changed = status.modifiedX !== modifiedX || status.modifiedY !== modifiedY;\n          status.locked = !!(status.dx || status.dy);\n          status.modifiedX = modifiedX;\n          status.modifiedY = modifiedY;\n        },\n        modifyCoords: function modifyCoords(_ref3) {\n          var page = _ref3.page,\n              client = _ref3.client,\n              status = _ref3.status,\n              phase = _ref3.phase,\n              options = _ref3.options;\n\n          if (options && options.enabled && !(phase === 'start' && status.locked)) {\n            if (status.locked) {\n              page.x += status.dx;\n              page.y += status.dy;\n              client.x += status.dx;\n              client.y += status.dy;\n              return {\n                dx: status.dx,\n                dy: status.dy\n              };\n            }\n          }\n        },\n        noInner: noInner,\n        noOuter: noOuter,\n        getRestrictionRect: getRestrictionRect\n      };\n      modifiers.restrictEdges = restrictEdges;\n      modifiers.names.push('restrictEdges');\n      defaultOptions.perAction.restrictEdges = restrictEdges.defaults;\n      resize.defaults.restrictEdges = restrictEdges.defaults;\n      module.exports = restrictEdges;\n    }, {\n      \"../actions/resize\": 10,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"../utils/rect\": 51,\n      \"./base\": 23,\n      \"./restrict\": 24\n    }],\n    26: [function (require, module, exports) {\n      'use strict'; // This module adds the options.resize.restrictSize setting which sets min and\n      // max width and height for the target being resized.\n      //\n      // interact(target).resize({\n      //   edges: { top: true, left: true },\n      //   restrictSize: {\n      //     min: { width: -600, height: -600 },\n      //     max: { width:  600, height:  600 },\n      //   },\n      // });\n\n      var modifiers = require('./base');\n\n      var restrictEdges = require('./restrictEdges');\n\n      var utils = require('../utils');\n\n      var rectUtils = require('../utils/rect');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var resize = require('../actions/resize');\n\n      var noMin = {\n        width: -Infinity,\n        height: -Infinity\n      };\n      var noMax = {\n        width: +Infinity,\n        height: +Infinity\n      };\n      var restrictSize = {\n        defaults: {\n          enabled: false,\n          endOnly: false,\n          min: null,\n          max: null\n        },\n        setOffset: function setOffset(_ref) {\n          var interaction = _ref.interaction;\n          return interaction.startOffset;\n        },\n        set: function set(arg) {\n          var interaction = arg.interaction,\n              options = arg.options;\n          var edges = interaction.prepared.linkedEdges || interaction.prepared.edges;\n\n          if (!interaction.interacting() || !edges) {\n            return;\n          }\n\n          var rect = rectUtils.xywhToTlbr(interaction.resizeRects.inverted);\n          var minSize = rectUtils.tlbrToXywh(restrictEdges.getRestrictionRect(options.min, interaction)) || noMin;\n          var maxSize = rectUtils.tlbrToXywh(restrictEdges.getRestrictionRect(options.max, interaction)) || noMax;\n          arg.options = {\n            enabled: options.enabled,\n            endOnly: options.endOnly,\n            inner: utils.extend({}, restrictEdges.noInner),\n            outer: utils.extend({}, restrictEdges.noOuter)\n          };\n\n          if (edges.top) {\n            arg.options.inner.top = rect.bottom - minSize.height;\n            arg.options.outer.top = rect.bottom - maxSize.height;\n          } else if (edges.bottom) {\n            arg.options.inner.bottom = rect.top + minSize.height;\n            arg.options.outer.bottom = rect.top + maxSize.height;\n          }\n\n          if (edges.left) {\n            arg.options.inner.left = rect.right - minSize.width;\n            arg.options.outer.left = rect.right - maxSize.width;\n          } else if (edges.right) {\n            arg.options.inner.right = rect.left + minSize.width;\n            arg.options.outer.right = rect.left + maxSize.width;\n          }\n\n          restrictEdges.set(arg);\n        },\n        modifyCoords: restrictEdges.modifyCoords\n      };\n      modifiers.restrictSize = restrictSize;\n      modifiers.names.push('restrictSize');\n      defaultOptions.perAction.restrictSize = restrictSize.defaults;\n      resize.defaults.restrictSize = restrictSize.defaults;\n      module.exports = restrictSize;\n    }, {\n      \"../actions/resize\": 10,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"../utils/rect\": 51,\n      \"./base\": 23,\n      \"./restrictEdges\": 25\n    }],\n    27: [function (require, module, exports) {\n      'use strict';\n\n      var modifiers = require('./base');\n\n      var interact = require('../interact');\n\n      var utils = require('../utils');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var snap = {\n        defaults: {\n          enabled: false,\n          endOnly: false,\n          range: Infinity,\n          targets: null,\n          offsets: null,\n          relativePoints: null\n        },\n        setOffset: function setOffset(_ref) {\n          var interaction = _ref.interaction,\n              interactable = _ref.interactable,\n              element = _ref.element,\n              rect = _ref.rect,\n              startOffset = _ref.startOffset,\n              options = _ref.options;\n          var offsets = [];\n          var optionsOrigin = utils.rectToXY(utils.resolveRectLike(options.origin));\n          var origin = optionsOrigin || utils.getOriginXY(interactable, element, interaction.prepared.name);\n          options = options || interactable.options[interaction.prepared.name].snap || {};\n          var snapOffset = void 0;\n\n          if (options.offset === 'startCoords') {\n            snapOffset = {\n              x: interaction.startCoords.page.x - origin.x,\n              y: interaction.startCoords.page.y - origin.y\n            };\n          } else {\n            var offsetRect = utils.resolveRectLike(options.offset, interactable, element, [interaction]);\n            snapOffset = utils.rectToXY(offsetRect) || {\n              x: 0,\n              y: 0\n            };\n          }\n\n          if (rect && options.relativePoints && options.relativePoints.length) {\n            for (var _i = 0; _i < options.relativePoints.length; _i++) {\n              var _ref3;\n\n              _ref3 = options.relativePoints[_i];\n              var _ref2 = _ref3;\n              var relativeX = _ref2.x;\n              var relativeY = _ref2.y;\n              offsets.push({\n                x: startOffset.left - rect.width * relativeX + snapOffset.x,\n                y: startOffset.top - rect.height * relativeY + snapOffset.y\n              });\n            }\n          } else {\n            offsets.push(snapOffset);\n          }\n\n          return offsets;\n        },\n        set: function set(_ref4) {\n          var interaction = _ref4.interaction,\n              modifiedCoords = _ref4.modifiedCoords,\n              status = _ref4.status,\n              options = _ref4.options,\n              offsets = _ref4.offset;\n          var targets = [];\n          var target = void 0;\n          var page = void 0;\n          var i = void 0;\n\n          if (status.useStatusXY) {\n            page = {\n              x: status.x,\n              y: status.y\n            };\n          } else {\n            var origin = utils.getOriginXY(interaction.target, interaction.element, interaction.prepared.name);\n            page = utils.extend({}, modifiedCoords);\n            page.x -= origin.x;\n            page.y -= origin.y;\n          }\n\n          status.realX = page.x;\n          status.realY = page.y;\n          var len = options.targets ? options.targets.length : 0;\n\n          for (var _i2 = 0; _i2 < offsets.length; _i2++) {\n            var _ref6;\n\n            _ref6 = offsets[_i2];\n            var _ref5 = _ref6;\n            var offsetX = _ref5.x;\n            var offsetY = _ref5.y;\n            var relativeX = page.x - offsetX;\n            var relativeY = page.y - offsetY;\n\n            for (var _i3 = 0; _i3 < (options.targets || []).length; _i3++) {\n              var _ref7;\n\n              _ref7 = (options.targets || [])[_i3];\n              var snapTarget = _ref7;\n\n              if (utils.is.function(snapTarget)) {\n                target = snapTarget(relativeX, relativeY, interaction);\n              } else {\n                target = snapTarget;\n              }\n\n              if (!target) {\n                continue;\n              }\n\n              targets.push({\n                x: utils.is.number(target.x) ? target.x + offsetX : relativeX,\n                y: utils.is.number(target.y) ? target.y + offsetY : relativeY,\n                range: utils.is.number(target.range) ? target.range : options.range\n              });\n            }\n          }\n\n          var closest = {\n            target: null,\n            inRange: false,\n            distance: 0,\n            range: 0,\n            dx: 0,\n            dy: 0\n          };\n\n          for (i = 0, len = targets.length; i < len; i++) {\n            target = targets[i];\n            var range = target.range;\n            var dx = target.x - page.x;\n            var dy = target.y - page.y;\n            var distance = utils.hypot(dx, dy);\n            var inRange = distance <= range; // Infinite targets count as being out of range\n            // compared to non infinite ones that are in range\n\n            if (range === Infinity && closest.inRange && closest.range !== Infinity) {\n              inRange = false;\n            }\n\n            if (!closest.target || (inRange // is the closest target in range?\n            ? closest.inRange && range !== Infinity // the pointer is relatively deeper in this target\n            ? distance / range < closest.distance / closest.range // this target has Infinite range and the closest doesn't\n            : range === Infinity && closest.range !== Infinity || // OR this target is closer that the previous closest\n            distance < closest.distance : // The other is not in range and the pointer is closer to this target\n            !closest.inRange && distance < closest.distance)) {\n              closest.target = target;\n              closest.distance = distance;\n              closest.range = range;\n              closest.inRange = inRange;\n              closest.dx = dx;\n              closest.dy = dy;\n              status.range = range;\n            }\n          }\n\n          var snapChanged = void 0;\n\n          if (closest.target) {\n            snapChanged = status.modifiedX !== closest.target.x || status.modifiedY !== closest.target.y;\n            status.modifiedX = closest.target.x;\n            status.modifiedY = closest.target.y;\n          } else {\n            snapChanged = true;\n            status.modifiedX = NaN;\n            status.modifiedY = NaN;\n          }\n\n          status.dx = closest.dx;\n          status.dy = closest.dy;\n          status.changed = snapChanged || closest.inRange && !status.locked;\n          status.locked = closest.inRange;\n        },\n        modifyCoords: function modifyCoords(_ref8) {\n          var page = _ref8.page,\n              client = _ref8.client,\n              status = _ref8.status,\n              phase = _ref8.phase,\n              options = _ref8.options;\n          var relativePoints = options && options.relativePoints;\n\n          if (options && options.enabled && !(phase === 'start' && relativePoints && relativePoints.length)) {\n            if (status.locked) {\n              page.x += status.dx;\n              page.y += status.dy;\n              client.x += status.dx;\n              client.y += status.dy;\n            }\n\n            return {\n              range: status.range,\n              locked: status.locked,\n              x: status.modifiedX,\n              y: status.modifiedY,\n              realX: status.realX,\n              realY: status.realY,\n              dx: status.dx,\n              dy: status.dy\n            };\n          }\n        }\n      };\n\n      interact.createSnapGrid = function (grid) {\n        return function (x, y) {\n          var limits = grid.limits || {\n            left: -Infinity,\n            right: Infinity,\n            top: -Infinity,\n            bottom: Infinity\n          };\n          var offsetX = 0;\n          var offsetY = 0;\n\n          if (utils.is.object(grid.offset)) {\n            offsetX = grid.offset.x;\n            offsetY = grid.offset.y;\n          }\n\n          var gridx = Math.round((x - offsetX) / grid.x);\n          var gridy = Math.round((y - offsetY) / grid.y);\n          var newX = Math.max(limits.left, Math.min(limits.right, gridx * grid.x + offsetX));\n          var newY = Math.max(limits.top, Math.min(limits.bottom, gridy * grid.y + offsetY));\n          return {\n            x: newX,\n            y: newY,\n            range: grid.range\n          };\n        };\n      };\n\n      modifiers.snap = snap;\n      modifiers.names.push('snap');\n      defaultOptions.perAction.snap = snap.defaults;\n      module.exports = snap;\n    }, {\n      \"../defaultOptions\": 18,\n      \"../interact\": 21,\n      \"../utils\": 44,\n      \"./base\": 23\n    }],\n    28: [function (require, module, exports) {\n      'use strict'; // This module allows snapping of the size of targets during resize\n      // interactions.\n\n      var modifiers = require('./base');\n\n      var snap = require('./snap');\n\n      var defaultOptions = require('../defaultOptions');\n\n      var resize = require('../actions/resize');\n\n      var utils = require('../utils/');\n\n      var snapSize = {\n        defaults: {\n          enabled: false,\n          endOnly: false,\n          range: Infinity,\n          targets: null,\n          offsets: null\n        },\n        setOffset: function setOffset(arg) {\n          var interaction = arg.interaction,\n              options = arg.options;\n          var edges = interaction.prepared.edges;\n\n          if (!edges) {\n            return;\n          }\n\n          arg.options = {\n            relativePoints: [{\n              x: edges.left ? 0 : 1,\n              y: edges.top ? 0 : 1\n            }],\n            origin: {\n              x: 0,\n              y: 0\n            },\n            offset: 'self',\n            range: options.range\n          };\n          var offsets = snap.setOffset(arg);\n          arg.options = options;\n          return offsets;\n        },\n        set: function set(arg) {\n          var interaction = arg.interaction,\n              options = arg.options,\n              offset = arg.offset,\n              modifiedCoords = arg.modifiedCoords;\n          var page = utils.extend({}, modifiedCoords);\n          var relativeX = page.x - offset[0].x;\n          var relativeY = page.y - offset[0].y;\n          arg.options = utils.extend({}, options);\n          arg.options.targets = [];\n\n          for (var _i = 0; _i < (options.targets || []).length; _i++) {\n            var _ref;\n\n            _ref = (options.targets || [])[_i];\n            var snapTarget = _ref;\n            var target = void 0;\n\n            if (utils.is.function(snapTarget)) {\n              target = snapTarget(relativeX, relativeY, interaction);\n            } else {\n              target = snapTarget;\n            }\n\n            if (!target) {\n              continue;\n            }\n\n            if ('width' in target && 'height' in target) {\n              target.x = target.width;\n              target.y = target.height;\n            }\n\n            arg.options.targets.push(target);\n          }\n\n          snap.set(arg);\n        },\n        modifyCoords: function modifyCoords(arg) {\n          var options = arg.options;\n          arg.options = utils.extend({}, options);\n          arg.options.enabled = options.enabled;\n          arg.options.relativePoints = [null];\n          snap.modifyCoords(arg);\n        }\n      };\n      modifiers.snapSize = snapSize;\n      modifiers.names.push('snapSize');\n      defaultOptions.perAction.snapSize = snapSize.defaults;\n      resize.defaults.snapSize = snapSize.defaults;\n      module.exports = snapSize;\n    }, {\n      \"../actions/resize\": 10,\n      \"../defaultOptions\": 18,\n      \"../utils/\": 44,\n      \"./base\": 23,\n      \"./snap\": 27\n    }],\n    29: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var pointerUtils = require('../utils/pointerUtils');\n\n      module.exports = function () {\n        /** */\n        function PointerEvent(type, pointer, event, eventTarget, interaction) {\n          _classCallCheck(this, PointerEvent);\n\n          pointerUtils.pointerExtend(this, event);\n\n          if (event !== pointer) {\n            pointerUtils.pointerExtend(this, pointer);\n          }\n\n          this.interaction = interaction;\n          this.timeStamp = new Date().getTime();\n          this.originalEvent = event;\n          this.type = type;\n          this.pointerId = pointerUtils.getPointerId(pointer);\n          this.pointerType = pointerUtils.getPointerType(pointer);\n          this.target = eventTarget;\n          this.currentTarget = null;\n\n          if (type === 'tap') {\n            var pointerIndex = interaction.getPointerIndex(pointer);\n            this.dt = this.timeStamp - interaction.downTimes[pointerIndex];\n            var interval = this.timeStamp - interaction.tapTime;\n            this.double = !!(interaction.prevTap && interaction.prevTap.type !== 'doubletap' && interaction.prevTap.target === this.target && interval < 500);\n          } else if (type === 'doubletap') {\n            this.dt = pointer.timeStamp - interaction.tapTime;\n          }\n        }\n\n        PointerEvent.prototype.subtractOrigin = function subtractOrigin(_ref) {\n          var originX = _ref.x,\n              originY = _ref.y;\n          this.pageX -= originX;\n          this.pageY -= originY;\n          this.clientX -= originX;\n          this.clientY -= originY;\n          return this;\n        };\n\n        PointerEvent.prototype.addOrigin = function addOrigin(_ref2) {\n          var originX = _ref2.x,\n              originY = _ref2.y;\n          this.pageX += originX;\n          this.pageY += originY;\n          this.clientX += originX;\n          this.clientY += originY;\n          return this;\n        };\n        /** */\n\n\n        PointerEvent.prototype.preventDefault = function preventDefault() {\n          this.originalEvent.preventDefault();\n        };\n        /** */\n\n\n        PointerEvent.prototype.stopPropagation = function stopPropagation() {\n          this.propagationStopped = true;\n        };\n        /** */\n\n\n        PointerEvent.prototype.stopImmediatePropagation = function stopImmediatePropagation() {\n          this.immediatePropagationStopped = this.propagationStopped = true;\n        };\n\n        return PointerEvent;\n      }();\n    }, {\n      \"../utils/pointerUtils\": 49\n    }],\n    30: [function (require, module, exports) {\n      'use strict';\n\n      var PointerEvent = require('./PointerEvent');\n\n      var Interaction = require('../Interaction');\n\n      var utils = require('../utils');\n\n      var defaults = require('../defaultOptions');\n\n      var signals = require('../utils/Signals').new();\n\n      var simpleSignals = ['down', 'up', 'cancel'];\n      var simpleEvents = ['down', 'up', 'cancel'];\n      var pointerEvents = {\n        PointerEvent: PointerEvent,\n        fire: fire,\n        collectEventTargets: collectEventTargets,\n        signals: signals,\n        defaults: {\n          holdDuration: 600,\n          ignoreFrom: null,\n          allowFrom: null,\n          origin: {\n            x: 0,\n            y: 0\n          }\n        },\n        types: ['down', 'move', 'up', 'cancel', 'tap', 'doubletap', 'hold']\n      };\n\n      function fire(arg) {\n        var interaction = arg.interaction,\n            pointer = arg.pointer,\n            event = arg.event,\n            eventTarget = arg.eventTarget,\n            _arg$type = arg.type,\n            type = _arg$type === undefined ? arg.pointerEvent.type : _arg$type,\n            _arg$targets = arg.targets,\n            targets = _arg$targets === undefined ? collectEventTargets(arg) : _arg$targets,\n            _arg$pointerEvent = arg.pointerEvent,\n            pointerEvent = _arg$pointerEvent === undefined ? new PointerEvent(type, pointer, event, eventTarget, interaction) : _arg$pointerEvent;\n        var signalArg = {\n          interaction: interaction,\n          pointer: pointer,\n          event: event,\n          eventTarget: eventTarget,\n          targets: targets,\n          type: type,\n          pointerEvent: pointerEvent\n        };\n\n        for (var i = 0; i < targets.length; i++) {\n          var target = targets[i];\n\n          for (var prop in target.props || {}) {\n            pointerEvent[prop] = target.props[prop];\n          }\n\n          var origin = utils.getOriginXY(target.eventable, target.element);\n          pointerEvent.subtractOrigin(origin);\n          pointerEvent.eventable = target.eventable;\n          pointerEvent.currentTarget = target.element;\n          target.eventable.fire(pointerEvent);\n          pointerEvent.addOrigin(origin);\n\n          if (pointerEvent.immediatePropagationStopped || pointerEvent.propagationStopped && i + 1 < targets.length && targets[i + 1].element !== pointerEvent.currentTarget) {\n            break;\n          }\n        }\n\n        signals.fire('fired', signalArg);\n\n        if (type === 'tap') {\n          // if pointerEvent should make a double tap, create and fire a doubletap\n          // PointerEvent and use that as the prevTap\n          var prevTap = pointerEvent.double ? fire({\n            interaction: interaction,\n            pointer: pointer,\n            event: event,\n            eventTarget: eventTarget,\n            type: 'doubletap'\n          }) : pointerEvent;\n          interaction.prevTap = prevTap;\n          interaction.tapTime = prevTap.timeStamp;\n        }\n\n        return pointerEvent;\n      }\n\n      function collectEventTargets(_ref) {\n        var interaction = _ref.interaction,\n            pointer = _ref.pointer,\n            event = _ref.event,\n            eventTarget = _ref.eventTarget,\n            type = _ref.type;\n        var pointerIndex = interaction.getPointerIndex(pointer); // do not fire a tap event if the pointer was moved before being lifted\n\n        if (type === 'tap' && (interaction.pointerWasMoved // or if the pointerup target is different to the pointerdown target\n        || !(interaction.downTargets[pointerIndex] && interaction.downTargets[pointerIndex] === eventTarget))) {\n          return [];\n        }\n\n        var path = utils.getPath(eventTarget);\n        var signalArg = {\n          interaction: interaction,\n          pointer: pointer,\n          event: event,\n          eventTarget: eventTarget,\n          type: type,\n          path: path,\n          targets: [],\n          element: null\n        };\n\n        for (var _i = 0; _i < path.length; _i++) {\n          var _ref2;\n\n          _ref2 = path[_i];\n          var element = _ref2;\n          signalArg.element = element;\n          signals.fire('collect-targets', signalArg);\n        }\n\n        if (type === 'hold') {\n          signalArg.targets = signalArg.targets.filter(function (target) {\n            return target.eventable.options.holdDuration === interaction.holdTimers[pointerIndex].duration;\n          });\n        }\n\n        return signalArg.targets;\n      }\n\n      Interaction.signals.on('update-pointer-down', function (_ref3) {\n        var interaction = _ref3.interaction,\n            pointerIndex = _ref3.pointerIndex;\n        interaction.holdTimers[pointerIndex] = {\n          duration: Infinity,\n          timeout: null\n        };\n      });\n      Interaction.signals.on('remove-pointer', function (_ref4) {\n        var interaction = _ref4.interaction,\n            pointerIndex = _ref4.pointerIndex;\n        interaction.holdTimers.splice(pointerIndex, 1);\n      });\n      Interaction.signals.on('move', function (_ref5) {\n        var interaction = _ref5.interaction,\n            pointer = _ref5.pointer,\n            event = _ref5.event,\n            eventTarget = _ref5.eventTarget,\n            duplicateMove = _ref5.duplicateMove;\n        var pointerIndex = interaction.getPointerIndex(pointer);\n\n        if (!duplicateMove && (!interaction.pointerIsDown || interaction.pointerWasMoved)) {\n          if (interaction.pointerIsDown) {\n            clearTimeout(interaction.holdTimers[pointerIndex].timeout);\n          }\n\n          fire({\n            interaction: interaction,\n            pointer: pointer,\n            event: event,\n            eventTarget: eventTarget,\n            type: 'move'\n          });\n        }\n      });\n      Interaction.signals.on('down', function (_ref6) {\n        var interaction = _ref6.interaction,\n            pointer = _ref6.pointer,\n            event = _ref6.event,\n            eventTarget = _ref6.eventTarget,\n            pointerIndex = _ref6.pointerIndex;\n        var timer = interaction.holdTimers[pointerIndex];\n        var path = utils.getPath(eventTarget);\n        var signalArg = {\n          interaction: interaction,\n          pointer: pointer,\n          event: event,\n          eventTarget: eventTarget,\n          type: 'hold',\n          targets: [],\n          path: path,\n          element: null\n        };\n\n        for (var _i2 = 0; _i2 < path.length; _i2++) {\n          var _ref7;\n\n          _ref7 = path[_i2];\n          var element = _ref7;\n          signalArg.element = element;\n          signals.fire('collect-targets', signalArg);\n        }\n\n        if (!signalArg.targets.length) {\n          return;\n        }\n\n        var minDuration = Infinity;\n\n        for (var _i3 = 0; _i3 < signalArg.targets.length; _i3++) {\n          var _ref8;\n\n          _ref8 = signalArg.targets[_i3];\n          var target = _ref8;\n          var holdDuration = target.eventable.options.holdDuration;\n\n          if (holdDuration < minDuration) {\n            minDuration = holdDuration;\n          }\n        }\n\n        timer.duration = minDuration;\n        timer.timeout = setTimeout(function () {\n          fire({\n            interaction: interaction,\n            eventTarget: eventTarget,\n            pointer: pointer,\n            event: event,\n            type: 'hold'\n          });\n        }, minDuration);\n      });\n      Interaction.signals.on('up', function (_ref9) {\n        var interaction = _ref9.interaction,\n            pointer = _ref9.pointer,\n            event = _ref9.event,\n            eventTarget = _ref9.eventTarget;\n\n        if (!interaction.pointerWasMoved) {\n          fire({\n            interaction: interaction,\n            eventTarget: eventTarget,\n            pointer: pointer,\n            event: event,\n            type: 'tap'\n          });\n        }\n      });\n      var _arr = ['up', 'cancel'];\n\n      for (var _i4 = 0; _i4 < _arr.length; _i4++) {\n        var signalName = _arr[_i4];\n        Interaction.signals.on(signalName, function (_ref11) {\n          var interaction = _ref11.interaction,\n              pointerIndex = _ref11.pointerIndex;\n\n          if (interaction.holdTimers[pointerIndex]) {\n            clearTimeout(interaction.holdTimers[pointerIndex].timeout);\n          }\n        });\n      }\n\n      function createSignalListener(type) {\n        return function (_ref10) {\n          var interaction = _ref10.interaction,\n              pointer = _ref10.pointer,\n              event = _ref10.event,\n              eventTarget = _ref10.eventTarget;\n          fire({\n            interaction: interaction,\n            eventTarget: eventTarget,\n            pointer: pointer,\n            event: event,\n            type: type\n          });\n        };\n      }\n\n      for (var i = 0; i < simpleSignals.length; i++) {\n        Interaction.signals.on(simpleSignals[i], createSignalListener(simpleEvents[i]));\n      }\n\n      Interaction.signals.on('new', function (interaction) {\n        interaction.prevTap = null; // the most recent tap event on this interaction\n\n        interaction.tapTime = 0; // time of the most recent tap event\n\n        interaction.holdTimers = []; // [{ duration, timeout }]\n      });\n      defaults.pointerEvents = pointerEvents.defaults;\n      module.exports = pointerEvents;\n    }, {\n      \"../Interaction\": 5,\n      \"../defaultOptions\": 18,\n      \"../utils\": 44,\n      \"../utils/Signals\": 34,\n      \"./PointerEvent\": 29\n    }],\n    31: [function (require, module, exports) {\n      'use strict';\n\n      var pointerEvents = require('./base');\n\n      var Interaction = require('../Interaction');\n\n      pointerEvents.signals.on('new', onNew);\n      pointerEvents.signals.on('fired', onFired);\n      var _arr = ['move', 'up', 'cancel', 'endall'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var signal = _arr[_i];\n        Interaction.signals.on(signal, endHoldRepeat);\n      }\n\n      function onNew(_ref) {\n        var pointerEvent = _ref.pointerEvent;\n\n        if (pointerEvent.type !== 'hold') {\n          return;\n        }\n\n        pointerEvent.count = (pointerEvent.count || 0) + 1;\n      }\n\n      function onFired(_ref2) {\n        var interaction = _ref2.interaction,\n            pointerEvent = _ref2.pointerEvent,\n            eventTarget = _ref2.eventTarget,\n            targets = _ref2.targets;\n\n        if (pointerEvent.type !== 'hold' || !targets.length) {\n          return;\n        } // get the repeat interval from the first eventable\n\n\n        var interval = targets[0].eventable.options.holdRepeatInterval; // don't repeat if the interval is 0 or less\n\n        if (interval <= 0) {\n          return;\n        } // set a timeout to fire the holdrepeat event\n\n\n        interaction.holdIntervalHandle = setTimeout(function () {\n          pointerEvents.fire({\n            interaction: interaction,\n            eventTarget: eventTarget,\n            type: 'hold',\n            pointer: pointerEvent,\n            event: pointerEvent\n          });\n        }, interval);\n      }\n\n      function endHoldRepeat(_ref3) {\n        var interaction = _ref3.interaction; // set the interaction's holdStopTime property\n        // to stop further holdRepeat events\n\n        if (interaction.holdIntervalHandle) {\n          clearInterval(interaction.holdIntervalHandle);\n          interaction.holdIntervalHandle = null;\n        }\n      } // don't repeat by default\n\n\n      pointerEvents.defaults.holdRepeatInterval = 0;\n      pointerEvents.types.push('holdrepeat');\n      module.exports = {\n        onNew: onNew,\n        onFired: onFired,\n        endHoldRepeat: endHoldRepeat\n      };\n    }, {\n      \"../Interaction\": 5,\n      \"./base\": 30\n    }],\n    32: [function (require, module, exports) {\n      'use strict';\n\n      var pointerEvents = require('./base');\n\n      var Interactable = require('../Interactable');\n\n      var is = require('../utils/is');\n\n      var scope = require('../scope');\n\n      var extend = require('../utils/extend');\n\n      var _require = require('../utils/arr'),\n          merge = _require.merge;\n\n      pointerEvents.signals.on('collect-targets', function (_ref) {\n        var targets = _ref.targets,\n            element = _ref.element,\n            type = _ref.type,\n            eventTarget = _ref.eventTarget;\n        scope.interactables.forEachMatch(element, function (interactable) {\n          var eventable = interactable.events;\n          var options = eventable.options;\n\n          if (eventable[type] && is.element(element) && interactable.testIgnoreAllow(options, element, eventTarget)) {\n            targets.push({\n              element: element,\n              eventable: eventable,\n              props: {\n                interactable: interactable\n              }\n            });\n          }\n        });\n      });\n      Interactable.signals.on('new', function (_ref2) {\n        var interactable = _ref2.interactable;\n\n        interactable.events.getRect = function (element) {\n          return interactable.getRect(element);\n        };\n      });\n      Interactable.signals.on('set', function (_ref3) {\n        var interactable = _ref3.interactable,\n            options = _ref3.options;\n        extend(interactable.events.options, pointerEvents.defaults);\n        extend(interactable.events.options, options);\n      });\n      merge(Interactable.eventTypes, pointerEvents.types);\n\n      Interactable.prototype.pointerEvents = function (options) {\n        extend(this.events.options, options);\n        return this;\n      };\n\n      var __backCompatOption = Interactable.prototype._backCompatOption;\n\n      Interactable.prototype._backCompatOption = function (optionName, newValue) {\n        var ret = __backCompatOption.call(this, optionName, newValue);\n\n        if (ret === this) {\n          this.events.options[optionName] = newValue;\n        }\n\n        return ret;\n      };\n\n      Interactable.settingsMethods.push('pointerEvents');\n    }, {\n      \"../Interactable\": 4,\n      \"../scope\": 33,\n      \"../utils/arr\": 35,\n      \"../utils/extend\": 41,\n      \"../utils/is\": 46,\n      \"./base\": 30\n    }],\n    33: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('./utils');\n\n      var events = require('./utils/events');\n\n      var signals = require('./utils/Signals').new();\n\n      var _require = require('./utils/window'),\n          getWindow = _require.getWindow;\n\n      var scope = {\n        signals: signals,\n        events: events,\n        utils: utils,\n        // main document\n        document: require('./utils/domObjects').document,\n        // all documents being listened to\n        documents: [],\n        addDocument: function addDocument(doc, win) {\n          // do nothing if document is already known\n          if (utils.contains(scope.documents, doc)) {\n            return false;\n          }\n\n          win = win || getWindow(doc);\n          scope.documents.push(doc);\n          events.documents.push(doc); // don't add an unload event for the main document\n          // so that the page may be cached in browser history\n\n          if (doc !== scope.document) {\n            events.add(win, 'unload', scope.onWindowUnload);\n          }\n\n          signals.fire('add-document', {\n            doc: doc,\n            win: win\n          });\n        },\n        removeDocument: function removeDocument(doc, win) {\n          var index = scope.documents.indexOf(doc);\n          win = win || getWindow(doc);\n          events.remove(win, 'unload', scope.onWindowUnload);\n          scope.documents.splice(index, 1);\n          events.documents.splice(index, 1);\n          signals.fire('remove-document', {\n            win: win,\n            doc: doc\n          });\n        },\n        onWindowUnload: function onWindowUnload() {\n          scope.removeDocument(this.document, this);\n        }\n      };\n      module.exports = scope;\n    }, {\n      \"./utils\": 44,\n      \"./utils/Signals\": 34,\n      \"./utils/domObjects\": 38,\n      \"./utils/events\": 40,\n      \"./utils/window\": 52\n    }],\n    34: [function (require, module, exports) {\n      \"use strict\";\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var Signals = function () {\n        function Signals() {\n          _classCallCheck(this, Signals);\n\n          this.listeners = {// signalName: [listeners],\n          };\n        }\n\n        Signals.prototype.on = function on(name, listener) {\n          if (!this.listeners[name]) {\n            this.listeners[name] = [listener];\n            return;\n          }\n\n          this.listeners[name].push(listener);\n        };\n\n        Signals.prototype.off = function off(name, listener) {\n          if (!this.listeners[name]) {\n            return;\n          }\n\n          var index = this.listeners[name].indexOf(listener);\n\n          if (index !== -1) {\n            this.listeners[name].splice(index, 1);\n          }\n        };\n\n        Signals.prototype.fire = function fire(name, arg) {\n          var targetListeners = this.listeners[name];\n\n          if (!targetListeners) {\n            return;\n          }\n\n          for (var _i = 0; _i < targetListeners.length; _i++) {\n            var _ref;\n\n            _ref = targetListeners[_i];\n            var listener = _ref;\n\n            if (listener(arg, name) === false) {\n              return;\n            }\n          }\n        };\n\n        return Signals;\n      }();\n\n      Signals.new = function () {\n        return new Signals();\n      };\n\n      module.exports = Signals;\n    }, {}],\n    35: [function (require, module, exports) {\n      \"use strict\";\n\n      function contains(array, target) {\n        return array.indexOf(target) !== -1;\n      }\n\n      function merge(target, source) {\n        for (var _i = 0; _i < source.length; _i++) {\n          var _ref;\n\n          _ref = source[_i];\n          var item = _ref;\n          target.push(item);\n        }\n\n        return target;\n      }\n\n      module.exports = {\n        contains: contains,\n        merge: merge\n      };\n    }, {}],\n    36: [function (require, module, exports) {\n      'use strict';\n\n      var _require = require('./window'),\n          window = _require.window;\n\n      var is = require('./is');\n\n      var domObjects = require('./domObjects');\n\n      var Element = domObjects.Element;\n      var navigator = window.navigator;\n      var browser = {\n        // Does the browser support touch input?\n        supportsTouch: !!('ontouchstart' in window || is.function(window.DocumentTouch) && domObjects.document instanceof window.DocumentTouch),\n        // Does the browser support PointerEvents\n        supportsPointerEvent: !!domObjects.PointerEvent,\n        isIOS: /iP(hone|od|ad)/.test(navigator.platform),\n        // scrolling doesn't change the result of getClientRects on iOS 7\n        isIOS7: /iP(hone|od|ad)/.test(navigator.platform) && /OS 7[^\\d]/.test(navigator.appVersion),\n        isIe9: /MSIE 9/.test(navigator.userAgent),\n        // prefix matchesSelector\n        prefixedMatchesSelector: 'matches' in Element.prototype ? 'matches' : 'webkitMatchesSelector' in Element.prototype ? 'webkitMatchesSelector' : 'mozMatchesSelector' in Element.prototype ? 'mozMatchesSelector' : 'oMatchesSelector' in Element.prototype ? 'oMatchesSelector' : 'msMatchesSelector',\n        pEventTypes: domObjects.PointerEvent ? domObjects.PointerEvent === window.MSPointerEvent ? {\n          up: 'MSPointerUp',\n          down: 'MSPointerDown',\n          over: 'mouseover',\n          out: 'mouseout',\n          move: 'MSPointerMove',\n          cancel: 'MSPointerCancel'\n        } : {\n          up: 'pointerup',\n          down: 'pointerdown',\n          over: 'pointerover',\n          out: 'pointerout',\n          move: 'pointermove',\n          cancel: 'pointercancel'\n        } : null,\n        // because Webkit and Opera still use 'mousewheel' event type\n        wheelEvent: 'onmousewheel' in domObjects.document ? 'mousewheel' : 'wheel'\n      }; // Opera Mobile must be handled differently\n\n      browser.isOperaMobile = navigator.appName === 'Opera' && browser.supportsTouch && navigator.userAgent.match('Presto');\n      module.exports = browser;\n    }, {\n      \"./domObjects\": 38,\n      \"./is\": 46,\n      \"./window\": 52\n    }],\n    37: [function (require, module, exports) {\n      'use strict';\n\n      var is = require('./is');\n\n      module.exports = function clone(source) {\n        var dest = {};\n\n        for (var prop in source) {\n          if (is.plainObject(source[prop])) {\n            dest[prop] = clone(source[prop]);\n          } else {\n            dest[prop] = source[prop];\n          }\n        }\n\n        return dest;\n      };\n    }, {\n      \"./is\": 46\n    }],\n    38: [function (require, module, exports) {\n      'use strict';\n\n      var domObjects = {};\n\n      var win = require('./window').window;\n\n      function blank() {}\n\n      domObjects.document = win.document;\n      domObjects.DocumentFragment = win.DocumentFragment || blank;\n      domObjects.SVGElement = win.SVGElement || blank;\n      domObjects.SVGSVGElement = win.SVGSVGElement || blank;\n      domObjects.SVGElementInstance = win.SVGElementInstance || blank;\n      domObjects.Element = win.Element || blank;\n      domObjects.HTMLElement = win.HTMLElement || domObjects.Element;\n      domObjects.Event = win.Event;\n      domObjects.Touch = win.Touch || blank;\n      domObjects.PointerEvent = win.PointerEvent || win.MSPointerEvent;\n      module.exports = domObjects;\n    }, {\n      \"./window\": 52\n    }],\n    39: [function (require, module, exports) {\n      'use strict';\n\n      var win = require('./window');\n\n      var browser = require('./browser');\n\n      var is = require('./is');\n\n      var domObjects = require('./domObjects');\n\n      var domUtils = {\n        nodeContains: function nodeContains(parent, child) {\n          while (child) {\n            if (child === parent) {\n              return true;\n            }\n\n            child = child.parentNode;\n          }\n\n          return false;\n        },\n        closest: function closest(element, selector) {\n          while (is.element(element)) {\n            if (domUtils.matchesSelector(element, selector)) {\n              return element;\n            }\n\n            element = domUtils.parentNode(element);\n          }\n\n          return null;\n        },\n        parentNode: function parentNode(node) {\n          var parent = node.parentNode;\n\n          if (is.docFrag(parent)) {\n            // skip past #shado-root fragments\n            while ((parent = parent.host) && is.docFrag(parent)) {\n              continue;\n            }\n\n            return parent;\n          }\n\n          return parent;\n        },\n        matchesSelector: function matchesSelector(element, selector) {\n          // remove /deep/ from selectors if shadowDOM polyfill is used\n          if (win.window !== win.realWindow) {\n            selector = selector.replace(/\\/deep\\//g, ' ');\n          }\n\n          return element[browser.prefixedMatchesSelector](selector);\n        },\n        // Test for the element that's \"above\" all other qualifiers\n        indexOfDeepestElement: function indexOfDeepestElement(elements) {\n          var deepestZoneParents = [];\n          var dropzoneParents = [];\n          var dropzone = void 0;\n          var deepestZone = elements[0];\n          var index = deepestZone ? 0 : -1;\n          var parent = void 0;\n          var child = void 0;\n          var i = void 0;\n          var n = void 0;\n\n          for (i = 1; i < elements.length; i++) {\n            dropzone = elements[i]; // an element might belong to multiple selector dropzones\n\n            if (!dropzone || dropzone === deepestZone) {\n              continue;\n            }\n\n            if (!deepestZone) {\n              deepestZone = dropzone;\n              index = i;\n              continue;\n            } // check if the deepest or current are document.documentElement or document.rootElement\n            // - if the current dropzone is, do nothing and continue\n\n\n            if (dropzone.parentNode === dropzone.ownerDocument) {\n              continue;\n            } // - if deepest is, update with the current dropzone and continue to next\n            else if (deepestZone.parentNode === dropzone.ownerDocument) {\n                deepestZone = dropzone;\n                index = i;\n                continue;\n              }\n\n            if (!deepestZoneParents.length) {\n              parent = deepestZone;\n\n              while (parent.parentNode && parent.parentNode !== parent.ownerDocument) {\n                deepestZoneParents.unshift(parent);\n                parent = parent.parentNode;\n              }\n            } // if this element is an svg element and the current deepest is\n            // an HTMLElement\n\n\n            if (deepestZone instanceof domObjects.HTMLElement && dropzone instanceof domObjects.SVGElement && !(dropzone instanceof domObjects.SVGSVGElement)) {\n              if (dropzone === deepestZone.parentNode) {\n                continue;\n              }\n\n              parent = dropzone.ownerSVGElement;\n            } else {\n              parent = dropzone;\n            }\n\n            dropzoneParents = [];\n\n            while (parent.parentNode !== parent.ownerDocument) {\n              dropzoneParents.unshift(parent);\n              parent = parent.parentNode;\n            }\n\n            n = 0; // get (position of last common ancestor) + 1\n\n            while (dropzoneParents[n] && dropzoneParents[n] === deepestZoneParents[n]) {\n              n++;\n            }\n\n            var parents = [dropzoneParents[n - 1], dropzoneParents[n], deepestZoneParents[n]];\n            child = parents[0].lastChild;\n\n            while (child) {\n              if (child === parents[1]) {\n                deepestZone = dropzone;\n                index = i;\n                deepestZoneParents = [];\n                break;\n              } else if (child === parents[2]) {\n                break;\n              }\n\n              child = child.previousSibling;\n            }\n          }\n\n          return index;\n        },\n        matchesUpTo: function matchesUpTo(element, selector, limit) {\n          while (is.element(element)) {\n            if (domUtils.matchesSelector(element, selector)) {\n              return true;\n            }\n\n            element = domUtils.parentNode(element);\n\n            if (element === limit) {\n              return domUtils.matchesSelector(element, selector);\n            }\n          }\n\n          return false;\n        },\n        getActualElement: function getActualElement(element) {\n          return element instanceof domObjects.SVGElementInstance ? element.correspondingUseElement : element;\n        },\n        getScrollXY: function getScrollXY(relevantWindow) {\n          relevantWindow = relevantWindow || win.window;\n          return {\n            x: relevantWindow.scrollX || relevantWindow.document.documentElement.scrollLeft,\n            y: relevantWindow.scrollY || relevantWindow.document.documentElement.scrollTop\n          };\n        },\n        getElementClientRect: function getElementClientRect(element) {\n          var clientRect = element instanceof domObjects.SVGElement ? element.getBoundingClientRect() : element.getClientRects()[0];\n          return clientRect && {\n            left: clientRect.left,\n            right: clientRect.right,\n            top: clientRect.top,\n            bottom: clientRect.bottom,\n            width: clientRect.width || clientRect.right - clientRect.left,\n            height: clientRect.height || clientRect.bottom - clientRect.top\n          };\n        },\n        getElementRect: function getElementRect(element) {\n          var clientRect = domUtils.getElementClientRect(element);\n\n          if (!browser.isIOS7 && clientRect) {\n            var scroll = domUtils.getScrollXY(win.getWindow(element));\n            clientRect.left += scroll.x;\n            clientRect.right += scroll.x;\n            clientRect.top += scroll.y;\n            clientRect.bottom += scroll.y;\n          }\n\n          return clientRect;\n        },\n        getPath: function getPath(element) {\n          var path = [];\n\n          while (element) {\n            path.push(element);\n            element = domUtils.parentNode(element);\n          }\n\n          return path;\n        },\n        trySelector: function trySelector(value) {\n          if (!is.string(value)) {\n            return false;\n          } // an exception will be raised if it is invalid\n\n\n          domObjects.document.querySelector(value);\n          return true;\n        }\n      };\n      module.exports = domUtils;\n    }, {\n      \"./browser\": 36,\n      \"./domObjects\": 38,\n      \"./is\": 46,\n      \"./window\": 52\n    }],\n    40: [function (require, module, exports) {\n      'use strict';\n\n      var is = require('./is');\n\n      var domUtils = require('./domUtils');\n\n      var pointerUtils = require('./pointerUtils');\n\n      var pExtend = require('./pointerExtend');\n\n      var _require = require('./window'),\n          window = _require.window;\n\n      var _require2 = require('./arr'),\n          contains = _require2.contains;\n\n      var elements = [];\n      var targets = []; // {\n      //   type: {\n      //     selectors: ['selector', ...],\n      //     contexts : [document, ...],\n      //     listeners: [[listener, capture, passive], ...]\n      //   }\n      //  }\n\n      var delegatedEvents = {};\n      var documents = [];\n\n      var supportsOptions = function () {\n        var supported = false;\n        window.document.createElement('div').addEventListener('test', null, {\n          get capture() {\n            supported = true;\n          }\n\n        });\n        return supported;\n      }();\n\n      function add(element, type, listener, optionalArg) {\n        var options = getOptions(optionalArg);\n        var elementIndex = elements.indexOf(element);\n        var target = targets[elementIndex];\n\n        if (!target) {\n          target = {\n            events: {},\n            typeCount: 0\n          };\n          elementIndex = elements.push(element) - 1;\n          targets.push(target);\n        }\n\n        if (!target.events[type]) {\n          target.events[type] = [];\n          target.typeCount++;\n        }\n\n        if (!contains(target.events[type], listener)) {\n          element.addEventListener(type, listener, supportsOptions ? options : !!options.capture);\n          target.events[type].push(listener);\n        }\n      }\n\n      function remove(element, type, listener, optionalArg) {\n        var options = getOptions(optionalArg);\n        var elementIndex = elements.indexOf(element);\n        var target = targets[elementIndex];\n\n        if (!target || !target.events) {\n          return;\n        }\n\n        if (type === 'all') {\n          for (type in target.events) {\n            if (target.events.hasOwnProperty(type)) {\n              remove(element, type, 'all');\n            }\n          }\n\n          return;\n        }\n\n        if (target.events[type]) {\n          var len = target.events[type].length;\n\n          if (listener === 'all') {\n            for (var i = 0; i < len; i++) {\n              remove(element, type, target.events[type][i], options);\n            }\n\n            return;\n          } else {\n            for (var _i = 0; _i < len; _i++) {\n              if (target.events[type][_i] === listener) {\n                element.removeEventListener('on' + type, listener, supportsOptions ? options : !!options.capture);\n                target.events[type].splice(_i, 1);\n                break;\n              }\n            }\n          }\n\n          if (target.events[type] && target.events[type].length === 0) {\n            target.events[type] = null;\n            target.typeCount--;\n          }\n        }\n\n        if (!target.typeCount) {\n          targets.splice(elementIndex, 1);\n          elements.splice(elementIndex, 1);\n        }\n      }\n\n      function addDelegate(selector, context, type, listener, optionalArg) {\n        var options = getOptions(optionalArg);\n\n        if (!delegatedEvents[type]) {\n          delegatedEvents[type] = {\n            selectors: [],\n            contexts: [],\n            listeners: []\n          }; // add delegate listener functions\n\n          for (var _i2 = 0; _i2 < documents.length; _i2++) {\n            var doc = documents[_i2];\n            add(doc, type, delegateListener);\n            add(doc, type, delegateUseCapture, true);\n          }\n        }\n\n        var delegated = delegatedEvents[type];\n        var index = void 0;\n\n        for (index = delegated.selectors.length - 1; index >= 0; index--) {\n          if (delegated.selectors[index] === selector && delegated.contexts[index] === context) {\n            break;\n          }\n        }\n\n        if (index === -1) {\n          index = delegated.selectors.length;\n          delegated.selectors.push(selector);\n          delegated.contexts.push(context);\n          delegated.listeners.push([]);\n        } // keep listener and capture and passive flags\n\n\n        delegated.listeners[index].push([listener, !!options.capture, options.passive]);\n      }\n\n      function removeDelegate(selector, context, type, listener, optionalArg) {\n        var options = getOptions(optionalArg);\n        var delegated = delegatedEvents[type];\n        var matchFound = false;\n        var index = void 0;\n\n        if (!delegated) {\n          return;\n        } // count from last index of delegated to 0\n\n\n        for (index = delegated.selectors.length - 1; index >= 0; index--) {\n          // look for matching selector and context Node\n          if (delegated.selectors[index] === selector && delegated.contexts[index] === context) {\n            var listeners = delegated.listeners[index]; // each item of the listeners array is an array: [function, capture, passive]\n\n            for (var i = listeners.length - 1; i >= 0; i--) {\n              var _listeners$i = listeners[i],\n                  fn = _listeners$i[0],\n                  capture = _listeners$i[1],\n                  passive = _listeners$i[2]; // check if the listener functions and capture and passive flags match\n\n              if (fn === listener && capture === !!options.capture && passive === options.passive) {\n                // remove the listener from the array of listeners\n                listeners.splice(i, 1); // if all listeners for this interactable have been removed\n                // remove the interactable from the delegated arrays\n\n                if (!listeners.length) {\n                  delegated.selectors.splice(index, 1);\n                  delegated.contexts.splice(index, 1);\n                  delegated.listeners.splice(index, 1); // remove delegate function from context\n\n                  remove(context, type, delegateListener);\n                  remove(context, type, delegateUseCapture, true); // remove the arrays if they are empty\n\n                  if (!delegated.selectors.length) {\n                    delegatedEvents[type] = null;\n                  }\n                } // only remove one listener\n\n\n                matchFound = true;\n                break;\n              }\n            }\n\n            if (matchFound) {\n              break;\n            }\n          }\n        }\n      } // bound to the interactable context when a DOM event\n      // listener is added to a selector interactable\n\n\n      function delegateListener(event, optionalArg) {\n        var options = getOptions(optionalArg);\n        var fakeEvent = {};\n        var delegated = delegatedEvents[event.type];\n\n        var _pointerUtils$getEven = pointerUtils.getEventTargets(event),\n            eventTarget = _pointerUtils$getEven[0];\n\n        var element = eventTarget; // duplicate the event so that currentTarget can be changed\n\n        pExtend(fakeEvent, event);\n        fakeEvent.originalEvent = event;\n        fakeEvent.preventDefault = preventOriginalDefault; // climb up document tree looking for selector matches\n\n        while (is.element(element)) {\n          for (var i = 0; i < delegated.selectors.length; i++) {\n            var selector = delegated.selectors[i];\n            var context = delegated.contexts[i];\n\n            if (domUtils.matchesSelector(element, selector) && domUtils.nodeContains(context, eventTarget) && domUtils.nodeContains(context, element)) {\n              var listeners = delegated.listeners[i];\n              fakeEvent.currentTarget = element;\n\n              for (var j = 0; j < listeners.length; j++) {\n                var _listeners$j = listeners[j],\n                    fn = _listeners$j[0],\n                    capture = _listeners$j[1],\n                    passive = _listeners$j[2];\n\n                if (capture === !!options.capture && passive === options.passive) {\n                  fn(fakeEvent);\n                }\n              }\n            }\n          }\n\n          element = domUtils.parentNode(element);\n        }\n      }\n\n      function delegateUseCapture(event) {\n        return delegateListener.call(this, event, true);\n      }\n\n      function preventOriginalDefault() {\n        this.originalEvent.preventDefault();\n      }\n\n      function getOptions(param) {\n        return is.object(param) ? param : {\n          capture: param\n        };\n      }\n\n      module.exports = {\n        add: add,\n        remove: remove,\n        addDelegate: addDelegate,\n        removeDelegate: removeDelegate,\n        delegateListener: delegateListener,\n        delegateUseCapture: delegateUseCapture,\n        delegatedEvents: delegatedEvents,\n        documents: documents,\n        supportsOptions: supportsOptions,\n        _elements: elements,\n        _targets: targets\n      };\n    }, {\n      \"./arr\": 35,\n      \"./domUtils\": 39,\n      \"./is\": 46,\n      \"./pointerExtend\": 48,\n      \"./pointerUtils\": 49,\n      \"./window\": 52\n    }],\n    41: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function extend(dest, source) {\n        for (var prop in source) {\n          dest[prop] = source[prop];\n        }\n\n        return dest;\n      };\n    }, {}],\n    42: [function (require, module, exports) {\n      'use strict';\n\n      var _require = require('./rect'),\n          resolveRectLike = _require.resolveRectLike,\n          rectToXY = _require.rectToXY;\n\n      module.exports = function (target, element, action) {\n        var actionOptions = target.options[action];\n        var actionOrigin = actionOptions && actionOptions.origin;\n        var origin = actionOrigin || target.options.origin;\n        var originRect = resolveRectLike(origin, target, element, [target && element]);\n        return rectToXY(originRect) || {\n          x: 0,\n          y: 0\n        };\n      };\n    }, {\n      \"./rect\": 51\n    }],\n    43: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function (x, y) {\n        return Math.sqrt(x * x + y * y);\n      };\n    }, {}],\n    44: [function (require, module, exports) {\n      'use strict';\n\n      var extend = require('./extend');\n\n      var win = require('./window');\n\n      var utils = {\n        warnOnce: function warnOnce(method, message) {\n          var warned = false;\n          return function () {\n            if (!warned) {\n              win.window.console.warn(message);\n              warned = true;\n            }\n\n            return method.apply(this, arguments);\n          };\n        },\n        // http://stackoverflow.com/a/5634528/2280888\n        _getQBezierValue: function _getQBezierValue(t, p1, p2, p3) {\n          var iT = 1 - t;\n          return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;\n        },\n        getQuadraticCurvePoint: function getQuadraticCurvePoint(startX, startY, cpX, cpY, endX, endY, position) {\n          return {\n            x: utils._getQBezierValue(position, startX, cpX, endX),\n            y: utils._getQBezierValue(position, startY, cpY, endY)\n          };\n        },\n        // http://gizma.com/easing/\n        easeOutQuad: function easeOutQuad(t, b, c, d) {\n          t /= d;\n          return -c * t * (t - 2) + b;\n        },\n        copyAction: function copyAction(dest, src) {\n          dest.name = src.name;\n          dest.axis = src.axis;\n          dest.edges = src.edges;\n          return dest;\n        },\n        is: require('./is'),\n        extend: extend,\n        hypot: require('./hypot'),\n        getOriginXY: require('./getOriginXY')\n      };\n      extend(utils, require('./arr'));\n      extend(utils, require('./domUtils'));\n      extend(utils, require('./pointerUtils'));\n      extend(utils, require('./rect'));\n      module.exports = utils;\n    }, {\n      \"./arr\": 35,\n      \"./domUtils\": 39,\n      \"./extend\": 41,\n      \"./getOriginXY\": 42,\n      \"./hypot\": 43,\n      \"./is\": 46,\n      \"./pointerUtils\": 49,\n      \"./rect\": 51,\n      \"./window\": 52\n    }],\n    45: [function (require, module, exports) {\n      'use strict';\n\n      var scope = require('../scope');\n\n      var utils = require('./index');\n\n      var finder = {\n        methodOrder: ['simulationResume', 'mouseOrPen', 'hasPointer', 'idle'],\n        search: function search(pointer, eventType, eventTarget) {\n          var pointerType = utils.getPointerType(pointer);\n          var pointerId = utils.getPointerId(pointer);\n          var details = {\n            pointer: pointer,\n            pointerId: pointerId,\n            pointerType: pointerType,\n            eventType: eventType,\n            eventTarget: eventTarget\n          };\n\n          for (var _i = 0; _i < finder.methodOrder.length; _i++) {\n            var _ref;\n\n            _ref = finder.methodOrder[_i];\n            var method = _ref;\n            var interaction = finder[method](details);\n\n            if (interaction) {\n              return interaction;\n            }\n          }\n        },\n        // try to resume simulation with a new pointer\n        simulationResume: function simulationResume(_ref2) {\n          var pointerType = _ref2.pointerType,\n              eventType = _ref2.eventType,\n              eventTarget = _ref2.eventTarget;\n\n          if (!/down|start/i.test(eventType)) {\n            return null;\n          }\n\n          for (var _i2 = 0; _i2 < scope.interactions.length; _i2++) {\n            var _ref3;\n\n            _ref3 = scope.interactions[_i2];\n            var interaction = _ref3;\n            var element = eventTarget;\n\n            if (interaction.simulation && interaction.simulation.allowResume && interaction.pointerType === pointerType) {\n              while (element) {\n                // if the element is the interaction element\n                if (element === interaction.element) {\n                  return interaction;\n                }\n\n                element = utils.parentNode(element);\n              }\n            }\n          }\n\n          return null;\n        },\n        // if it's a mouse or pen interaction\n        mouseOrPen: function mouseOrPen(_ref4) {\n          var pointerId = _ref4.pointerId,\n              pointerType = _ref4.pointerType,\n              eventType = _ref4.eventType;\n\n          if (pointerType !== 'mouse' && pointerType !== 'pen') {\n            return null;\n          }\n\n          var firstNonActive = void 0;\n\n          for (var _i3 = 0; _i3 < scope.interactions.length; _i3++) {\n            var _ref5;\n\n            _ref5 = scope.interactions[_i3];\n            var interaction = _ref5;\n\n            if (interaction.pointerType === pointerType) {\n              // if it's a down event, skip interactions with running simulations\n              if (interaction.simulation && !utils.contains(interaction.pointerIds, pointerId)) {\n                continue;\n              } // if the interaction is active, return it immediately\n\n\n              if (interaction.interacting()) {\n                return interaction;\n              } // otherwise save it and look for another active interaction\n              else if (!firstNonActive) {\n                  firstNonActive = interaction;\n                }\n            }\n          } // if no active mouse interaction was found use the first inactive mouse\n          // interaction\n\n\n          if (firstNonActive) {\n            return firstNonActive;\n          } // find any mouse or pen interaction.\n          // ignore the interaction if the eventType is a *down, and a simulation\n          // is active\n\n\n          for (var _i4 = 0; _i4 < scope.interactions.length; _i4++) {\n            var _ref6;\n\n            _ref6 = scope.interactions[_i4];\n            var _interaction = _ref6;\n\n            if (_interaction.pointerType === pointerType && !(/down/i.test(eventType) && _interaction.simulation)) {\n              return _interaction;\n            }\n          }\n\n          return null;\n        },\n        // get interaction that has this pointer\n        hasPointer: function hasPointer(_ref7) {\n          var pointerId = _ref7.pointerId;\n\n          for (var _i5 = 0; _i5 < scope.interactions.length; _i5++) {\n            var _ref8;\n\n            _ref8 = scope.interactions[_i5];\n            var interaction = _ref8;\n\n            if (utils.contains(interaction.pointerIds, pointerId)) {\n              return interaction;\n            }\n          }\n        },\n        // get first idle interaction with a matching pointerType\n        idle: function idle(_ref9) {\n          var pointerType = _ref9.pointerType;\n\n          for (var _i6 = 0; _i6 < scope.interactions.length; _i6++) {\n            var _ref10;\n\n            _ref10 = scope.interactions[_i6];\n            var interaction = _ref10; // if there's already a pointer held down\n\n            if (interaction.pointerIds.length === 1) {\n              var target = interaction.target; // don't add this pointer if there is a target interactable and it\n              // isn't gesturable\n\n              if (target && !target.options.gesture.enabled) {\n                continue;\n              }\n            } // maximum of 2 pointers per interaction\n            else if (interaction.pointerIds.length >= 2) {\n                continue;\n              }\n\n            if (!interaction.interacting() && pointerType === interaction.pointerType) {\n              return interaction;\n            }\n          }\n\n          return null;\n        }\n      };\n      module.exports = finder;\n    }, {\n      \"../scope\": 33,\n      \"./index\": 44\n    }],\n    46: [function (require, module, exports) {\n      'use strict';\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var win = require('./window');\n\n      var isWindow = require('./isWindow');\n\n      var is = {\n        array: function array() {},\n        window: function window(thing) {\n          return thing === win.window || isWindow(thing);\n        },\n        docFrag: function docFrag(thing) {\n          return is.object(thing) && thing.nodeType === 11;\n        },\n        object: function object(thing) {\n          return !!thing && (typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) === 'object';\n        },\n        function: function _function(thing) {\n          return typeof thing === 'function';\n        },\n        number: function number(thing) {\n          return typeof thing === 'number';\n        },\n        bool: function bool(thing) {\n          return typeof thing === 'boolean';\n        },\n        string: function string(thing) {\n          return typeof thing === 'string';\n        },\n        element: function element(thing) {\n          if (!thing || (typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) !== 'object') {\n            return false;\n          }\n\n          var _window = win.getWindow(thing) || win.window;\n\n          return /object|function/.test(_typeof(_window.Element)) ? thing instanceof _window.Element //DOM2\n          : thing.nodeType === 1 && typeof thing.nodeName === 'string';\n        },\n        plainObject: function plainObject(thing) {\n          return is.object(thing) && thing.constructor.name === 'Object';\n        }\n      };\n\n      is.array = function (thing) {\n        return is.object(thing) && typeof thing.length !== 'undefined' && is.function(thing.splice);\n      };\n\n      module.exports = is;\n    }, {\n      \"./isWindow\": 47,\n      \"./window\": 52\n    }],\n    47: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function (thing) {\n        return !!(thing && thing.Window) && thing instanceof thing.Window;\n      };\n    }, {}],\n    48: [function (require, module, exports) {\n      'use strict';\n\n      function pointerExtend(dest, source) {\n        for (var prop in source) {\n          var prefixedPropREs = module.exports.prefixedPropREs;\n          var deprecated = false; // skip deprecated prefixed properties\n\n          for (var vendor in prefixedPropREs) {\n            if (prop.indexOf(vendor) === 0 && prefixedPropREs[vendor].test(prop)) {\n              deprecated = true;\n              break;\n            }\n          }\n\n          if (!deprecated && typeof source[prop] !== 'function') {\n            dest[prop] = source[prop];\n          }\n        }\n\n        return dest;\n      }\n\n      pointerExtend.prefixedPropREs = {\n        webkit: /(Movement[XY]|Radius[XY]|RotationAngle|Force)$/\n      };\n      module.exports = pointerExtend;\n    }, {}],\n    49: [function (require, module, exports) {\n      'use strict';\n\n      var hypot = require('./hypot');\n\n      var browser = require('./browser');\n\n      var dom = require('./domObjects');\n\n      var domUtils = require('./domUtils');\n\n      var domObjects = require('./domObjects');\n\n      var is = require('./is');\n\n      var pointerExtend = require('./pointerExtend');\n\n      var pointerUtils = {\n        copyCoords: function copyCoords(dest, src) {\n          dest.page = dest.page || {};\n          dest.page.x = src.page.x;\n          dest.page.y = src.page.y;\n          dest.client = dest.client || {};\n          dest.client.x = src.client.x;\n          dest.client.y = src.client.y;\n          dest.timeStamp = src.timeStamp;\n        },\n        setCoordDeltas: function setCoordDeltas(targetObj, prev, cur) {\n          targetObj.page.x = cur.page.x - prev.page.x;\n          targetObj.page.y = cur.page.y - prev.page.y;\n          targetObj.client.x = cur.client.x - prev.client.x;\n          targetObj.client.y = cur.client.y - prev.client.y;\n          targetObj.timeStamp = cur.timeStamp - prev.timeStamp; // set pointer velocity\n\n          var dt = Math.max(targetObj.timeStamp / 1000, 0.001);\n          targetObj.page.speed = hypot(targetObj.page.x, targetObj.page.y) / dt;\n          targetObj.page.vx = targetObj.page.x / dt;\n          targetObj.page.vy = targetObj.page.y / dt;\n          targetObj.client.speed = hypot(targetObj.client.x, targetObj.page.y) / dt;\n          targetObj.client.vx = targetObj.client.x / dt;\n          targetObj.client.vy = targetObj.client.y / dt;\n        },\n        isNativePointer: function isNativePointer(pointer) {\n          return pointer instanceof dom.Event || pointer instanceof dom.Touch;\n        },\n        // Get specified X/Y coords for mouse or event.touches[0]\n        getXY: function getXY(type, pointer, xy) {\n          xy = xy || {};\n          type = type || 'page';\n          xy.x = pointer[type + 'X'];\n          xy.y = pointer[type + 'Y'];\n          return xy;\n        },\n        getPageXY: function getPageXY(pointer, page) {\n          page = page || {}; // Opera Mobile handles the viewport and scrolling oddly\n\n          if (browser.isOperaMobile && pointerUtils.isNativePointer(pointer)) {\n            pointerUtils.getXY('screen', pointer, page);\n            page.x += window.scrollX;\n            page.y += window.scrollY;\n          } else {\n            pointerUtils.getXY('page', pointer, page);\n          }\n\n          return page;\n        },\n        getClientXY: function getClientXY(pointer, client) {\n          client = client || {};\n\n          if (browser.isOperaMobile && pointerUtils.isNativePointer(pointer)) {\n            // Opera Mobile handles the viewport and scrolling oddly\n            pointerUtils.getXY('screen', pointer, client);\n          } else {\n            pointerUtils.getXY('client', pointer, client);\n          }\n\n          return client;\n        },\n        getPointerId: function getPointerId(pointer) {\n          return is.number(pointer.pointerId) ? pointer.pointerId : pointer.identifier;\n        },\n        setCoords: function setCoords(targetObj, pointers, timeStamp) {\n          var pointer = pointers.length > 1 ? pointerUtils.pointerAverage(pointers) : pointers[0];\n          var tmpXY = {};\n          pointerUtils.getPageXY(pointer, tmpXY);\n          targetObj.page.x = tmpXY.x;\n          targetObj.page.y = tmpXY.y;\n          pointerUtils.getClientXY(pointer, tmpXY);\n          targetObj.client.x = tmpXY.x;\n          targetObj.client.y = tmpXY.y;\n          targetObj.timeStamp = is.number(timeStamp) ? timeStamp : new Date().getTime();\n        },\n        pointerExtend: pointerExtend,\n        getTouchPair: function getTouchPair(event) {\n          var touches = []; // array of touches is supplied\n\n          if (is.array(event)) {\n            touches[0] = event[0];\n            touches[1] = event[1];\n          } // an event\n          else {\n              if (event.type === 'touchend') {\n                if (event.touches.length === 1) {\n                  touches[0] = event.touches[0];\n                  touches[1] = event.changedTouches[0];\n                } else if (event.touches.length === 0) {\n                  touches[0] = event.changedTouches[0];\n                  touches[1] = event.changedTouches[1];\n                }\n              } else {\n                touches[0] = event.touches[0];\n                touches[1] = event.touches[1];\n              }\n            }\n\n          return touches;\n        },\n        pointerAverage: function pointerAverage(pointers) {\n          var average = {\n            pageX: 0,\n            pageY: 0,\n            clientX: 0,\n            clientY: 0,\n            screenX: 0,\n            screenY: 0\n          };\n\n          for (var _i = 0; _i < pointers.length; _i++) {\n            var _ref;\n\n            _ref = pointers[_i];\n            var pointer = _ref;\n\n            for (var _prop in average) {\n              average[_prop] += pointer[_prop];\n            }\n          }\n\n          for (var prop in average) {\n            average[prop] /= pointers.length;\n          }\n\n          return average;\n        },\n        touchBBox: function touchBBox(event) {\n          if (!event.length && !(event.touches && event.touches.length > 1)) {\n            return;\n          }\n\n          var touches = pointerUtils.getTouchPair(event);\n          var minX = Math.min(touches[0].pageX, touches[1].pageX);\n          var minY = Math.min(touches[0].pageY, touches[1].pageY);\n          var maxX = Math.max(touches[0].pageX, touches[1].pageX);\n          var maxY = Math.max(touches[0].pageY, touches[1].pageY);\n          return {\n            x: minX,\n            y: minY,\n            left: minX,\n            top: minY,\n            width: maxX - minX,\n            height: maxY - minY\n          };\n        },\n        touchDistance: function touchDistance(event, deltaSource) {\n          var sourceX = deltaSource + 'X';\n          var sourceY = deltaSource + 'Y';\n          var touches = pointerUtils.getTouchPair(event);\n          var dx = touches[0][sourceX] - touches[1][sourceX];\n          var dy = touches[0][sourceY] - touches[1][sourceY];\n          return hypot(dx, dy);\n        },\n        touchAngle: function touchAngle(event, prevAngle, deltaSource) {\n          var sourceX = deltaSource + 'X';\n          var sourceY = deltaSource + 'Y';\n          var touches = pointerUtils.getTouchPair(event);\n          var dx = touches[1][sourceX] - touches[0][sourceX];\n          var dy = touches[1][sourceY] - touches[0][sourceY];\n          var angle = 180 * Math.atan2(dy, dx) / Math.PI;\n          return angle;\n        },\n        getPointerType: function getPointerType(pointer) {\n          return is.string(pointer.pointerType) ? pointer.pointerType : is.number(pointer.pointerType) ? [undefined, undefined, 'touch', 'pen', 'mouse'][pointer.pointerType] // if the PointerEvent API isn't available, then the \"pointer\" must\n          // be either a MouseEvent, TouchEvent, or Touch object\n          : /touch/.test(pointer.type) || pointer instanceof domObjects.Touch ? 'touch' : 'mouse';\n        },\n        // [ event.target, event.currentTarget ]\n        getEventTargets: function getEventTargets(event) {\n          var path = is.function(event.composedPath) ? event.composedPath() : event.path;\n          return [domUtils.getActualElement(path ? path[0] : event.target), domUtils.getActualElement(event.currentTarget)];\n        }\n      };\n      module.exports = pointerUtils;\n    }, {\n      \"./browser\": 36,\n      \"./domObjects\": 38,\n      \"./domUtils\": 39,\n      \"./hypot\": 43,\n      \"./is\": 46,\n      \"./pointerExtend\": 48\n    }],\n    50: [function (require, module, exports) {\n      'use strict';\n\n      var _require = require('./window'),\n          window = _require.window;\n\n      var vendors = ['ms', 'moz', 'webkit', 'o'];\n      var lastTime = 0;\n      var request = void 0;\n      var cancel = void 0;\n\n      for (var x = 0; x < vendors.length && !window.requestAnimationFrame; x++) {\n        request = window[vendors[x] + 'RequestAnimationFrame'];\n        cancel = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n      }\n\n      if (!request) {\n        request = function request(callback) {\n          var currTime = new Date().getTime();\n          var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n          var id = setTimeout(function () {\n            callback(currTime + timeToCall);\n          }, timeToCall);\n          lastTime = currTime + timeToCall;\n          return id;\n        };\n      }\n\n      if (!cancel) {\n        cancel = function cancel(id) {\n          clearTimeout(id);\n        };\n      }\n\n      module.exports = {\n        request: request,\n        cancel: cancel\n      };\n    }, {\n      \"./window\": 52\n    }],\n    51: [function (require, module, exports) {\n      'use strict';\n\n      var extend = require('./extend');\n\n      var is = require('./is');\n\n      var _require = require('./domUtils'),\n          closest = _require.closest,\n          parentNode = _require.parentNode,\n          getElementRect = _require.getElementRect;\n\n      var rectUtils = {\n        getStringOptionResult: function getStringOptionResult(value, interactable, element) {\n          if (!is.string(value)) {\n            return null;\n          }\n\n          if (value === 'parent') {\n            value = parentNode(element);\n          } else if (value === 'self') {\n            value = interactable.getRect(element);\n          } else {\n            value = closest(element, value);\n          }\n\n          return value;\n        },\n        resolveRectLike: function resolveRectLike(value, interactable, element, functionArgs) {\n          value = rectUtils.getStringOptionResult(value, interactable, element) || value;\n\n          if (is.function(value)) {\n            value = value.apply(null, functionArgs);\n          }\n\n          if (is.element(value)) {\n            value = getElementRect(value);\n          }\n\n          return value;\n        },\n        rectToXY: function rectToXY(rect) {\n          return rect && {\n            x: 'x' in rect ? rect.x : rect.left,\n            y: 'y' in rect ? rect.y : rect.top\n          };\n        },\n        xywhToTlbr: function xywhToTlbr(rect) {\n          if (rect && !('left' in rect && 'top' in rect)) {\n            rect = extend({}, rect);\n            rect.left = rect.x || 0;\n            rect.top = rect.y || 0;\n            rect.right = rect.right || rect.left + rect.width;\n            rect.bottom = rect.bottom || rect.top + rect.height;\n          }\n\n          return rect;\n        },\n        tlbrToXywh: function tlbrToXywh(rect) {\n          if (rect && !('x' in rect && 'y' in rect)) {\n            rect = extend({}, rect);\n            rect.x = rect.left || 0;\n            rect.top = rect.top || 0;\n            rect.width = rect.width || rect.right - rect.x;\n            rect.height = rect.height || rect.bottom - rect.y;\n          }\n\n          return rect;\n        }\n      };\n      module.exports = rectUtils;\n    }, {\n      \"./domUtils\": 39,\n      \"./extend\": 41,\n      \"./is\": 46\n    }],\n    52: [function (require, module, exports) {\n      'use strict';\n\n      var win = module.exports;\n\n      var isWindow = require('./isWindow');\n\n      function init(window) {\n        // get wrapped window if using Shadow DOM polyfill\n        win.realWindow = window; // create a TextNode\n\n        var el = window.document.createTextNode(''); // check if it's wrapped by a polyfill\n\n        if (el.ownerDocument !== window.document && typeof window.wrap === 'function' && window.wrap(el) === el) {\n          // use wrapped window\n          window = window.wrap(window);\n        }\n\n        win.window = window;\n      }\n\n      if (typeof window === 'undefined') {\n        win.window = undefined;\n        win.realWindow = undefined;\n      } else {\n        init(window);\n      }\n\n      win.getWindow = function getWindow(node) {\n        if (isWindow(node)) {\n          return node;\n        }\n\n        var rootNode = node.ownerDocument || node;\n        return rootNode.defaultView || rootNode.parentWindow || win.window;\n      };\n\n      win.init = init;\n    }, {\n      \"./isWindow\": 47\n    }]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}