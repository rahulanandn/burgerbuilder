{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _get from 'babel-runtime/helpers/get';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport ReactDragListView from './ReactDragListView';\nvar UNIT_PX = 'px';\nvar DRAG_LIND_STYLE = 'width:0;margin-left:-1px;margin-top:0;' + 'border-bottom:0 none;border-left:dashed 2px red;';\nvar DIRECTIONS = {\n  RIGHT: 2,\n  LEFT: 4\n};\n\nvar ReactDragColumnView = function (_ReactDragListView) {\n  _inherits(ReactDragColumnView, _ReactDragListView);\n\n  function ReactDragColumnView() {\n    _classCallCheck(this, ReactDragColumnView);\n\n    return _possibleConstructorReturn(this, (ReactDragColumnView.__proto__ || Object.getPrototypeOf(ReactDragColumnView)).apply(this, arguments));\n  }\n\n  _createClass(ReactDragColumnView, [{\n    key: 'getDragLine',\n    value: function getDragLine() {\n      if (!this.dragLine) {\n        _get(ReactDragColumnView.prototype.__proto__ || Object.getPrototypeOf(ReactDragColumnView.prototype), 'getDragLine', this).call(this);\n\n        this.dragLine.setAttribute('style', this.dragLine.getAttribute('style') + DRAG_LIND_STYLE);\n      }\n\n      return this.dragLine;\n    }\n  }, {\n    key: 'resolveAutoScroll',\n    value: function resolveAutoScroll(e, target) {\n      if (!this.scrollElement) {\n        return;\n      }\n\n      var _scrollElement$getBou = this.scrollElement.getBoundingClientRect(),\n          left = _scrollElement$getBou.left,\n          width = _scrollElement$getBou.width;\n\n      var targetWidth = target.offsetWidth;\n      var pageX = e.pageX;\n      var compatibleWidth = targetWidth * 2 / 3;\n      this.direction = 0;\n\n      if (pageX > left + width - compatibleWidth) {\n        this.direction = DIRECTIONS.RIGHT;\n      } else if (pageX < left + compatibleWidth) {\n        this.direction = DIRECTIONS.LEFT;\n      }\n\n      if (this.direction) {\n        if (this.scrollTimerId < 0) {\n          this.scrollTimerId = setInterval(this.autoScroll, 20);\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'autoScroll',\n    value: function autoScroll() {\n      var scrollLeft = this.scrollElement.scrollLeft;\n\n      if (this.direction === DIRECTIONS.RIGHT) {\n        this.scrollElement.scrollLeft = scrollLeft + this.props.scrollSpeed;\n\n        if (scrollLeft === this.scrollElement.scrollLeft) {\n          this.stopAutoScroll();\n        }\n      } else if (this.direction === DIRECTIONS.LEFT) {\n        this.scrollElement.scrollLeft = scrollLeft - this.props.scrollSpeed;\n\n        if (this.scrollElement.scrollLeft <= 0) {\n          this.stopAutoScroll();\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'fixDragLine',\n    value: function fixDragLine(target) {\n      var dragLine = this.getDragLine();\n\n      if (!target || this.state.fromIndex < 0 || this.state.fromIndex === this.state.toIndex) {\n        this.hideDragLine();\n        return;\n      }\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          left = _target$getBoundingCl.left,\n          top = _target$getBoundingCl.top,\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var lineLeft = this.state.toIndex < this.state.fromIndex ? left : left + width;\n\n      if (this.props.enableScroll && this.scrollElement) {\n        var _scrollElement$getBou2 = this.scrollElement.getBoundingClientRect(),\n            scrollWidth = _scrollElement$getBou2.width,\n            scrollLeft = _scrollElement$getBou2.left;\n\n        if (lineLeft < scrollLeft - 2 || lineLeft > scrollLeft + scrollWidth + 2) {\n          this.hideDragLine();\n          return;\n        }\n      }\n\n      dragLine.style.top = top + UNIT_PX;\n      dragLine.style.height = height + UNIT_PX;\n      dragLine.style.left = lineLeft + UNIT_PX;\n      dragLine.style.display = 'block';\n    }\n  }]);\n\n  return ReactDragColumnView;\n}(ReactDragListView);\n\nexport default ReactDragColumnView;","map":null,"metadata":{},"sourceType":"module"}