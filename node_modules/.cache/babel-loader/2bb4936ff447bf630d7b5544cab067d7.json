{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { closest, getDomIndex, getScrollElement } from './util';\nvar DEFAULT_NODE_SELECTOR = 'tr';\nvar DIRECTIONS = {\n  TOP: 1,\n  BOTTOM: 3\n};\nvar UNIT_PX = 'px';\nvar DRAG_LIND_STYLE = 'position:fixed;z-index:9999;height:0;' + 'margin-top:-1px;border-bottom:dashed 2px red;display:none;';\n\nvar ReactDragListView = function (_Component) {\n  _inherits(ReactDragListView, _Component);\n\n  function ReactDragListView(props) {\n    _classCallCheck(this, ReactDragListView);\n\n    var _this = _possibleConstructorReturn(this, (ReactDragListView.__proto__ || Object.getPrototypeOf(ReactDragListView)).call(this, props));\n\n    _this.onMouseDown = _this.onMouseDown.bind(_this);\n    _this.onDragStart = _this.onDragStart.bind(_this);\n    _this.onDragEnter = _this.onDragEnter.bind(_this);\n    _this.onDragEnd = _this.onDragEnd.bind(_this);\n    _this.autoScroll = _this.autoScroll.bind(_this);\n    _this.state = {\n      fromIndex: -1,\n      toIndex: -1\n    };\n    _this.scrollElement = null;\n    _this.scrollTimerId = -1;\n    _this.direction = DIRECTIONS.BOTTOM;\n    return _this;\n  }\n\n  _createClass(ReactDragListView, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.dragLine && this.dragLine.parentNode) {\n        this.dragLine.parentNode.removeChild(this.dragLine);\n        this.dragLine = null;\n        this.cacheDragTarget = null;\n      }\n    }\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(e) {\n      var handle = this.getHandleNode(e.target);\n\n      if (handle) {\n        var target = !this.props.handleSelector || this.props.handleSelector === this.props.nodeSelector ? handle : this.getDragNode(handle);\n\n        if (target) {\n          handle.setAttribute('draggable', false);\n          target.setAttribute('draggable', true);\n          target.ondragstart = this.onDragStart;\n          target.ondragend = this.onDragEnd;\n        }\n      }\n    }\n  }, {\n    key: 'onDragStart',\n    value: function onDragStart(e) {\n      var target = this.getDragNode(e.target);\n      var eventData = e;\n\n      if (target) {\n        var parentNode = target.parentNode;\n        eventData.dataTransfer.setData('Text', '');\n        eventData.dataTransfer.effectAllowed = 'move';\n        parentNode.ondragenter = this.onDragEnter;\n\n        parentNode.ondragover = function (ev) {\n          ev.preventDefault();\n          return true;\n        };\n\n        var fromIndex = getDomIndex(target, this.props.ignoreSelector);\n        this.setState({\n          fromIndex: fromIndex,\n          toIndex: fromIndex\n        });\n        this.scrollElement = getScrollElement(parentNode);\n      }\n    }\n  }, {\n    key: 'onDragEnter',\n    value: function onDragEnter(e) {\n      var target = this.getDragNode(e.target);\n      var eventData = e;\n      var toIndex = void 0;\n\n      if (target) {\n        toIndex = getDomIndex(target, this.props.ignoreSelector);\n\n        if (this.props.enableScroll) {\n          this.resolveAutoScroll(eventData, target);\n        }\n      } else {\n        toIndex = -1;\n        this.stopAutoScroll();\n      }\n\n      this.cacheDragTarget = target;\n      this.setState({\n        toIndex: toIndex\n      });\n      this.fixDragLine(target);\n    }\n  }, {\n    key: 'onDragEnd',\n    value: function onDragEnd(e) {\n      var target = this.getDragNode(e.target);\n      this.stopAutoScroll();\n\n      if (target) {\n        target.removeAttribute('draggable');\n        target.ondragstart = null;\n        target.ondragend = null;\n        target.parentNode.ondragenter = null;\n        target.parentNode.ondragover = null;\n\n        if (this.state.fromIndex >= 0 && this.state.fromIndex !== this.state.toIndex) {\n          this.props.onDragEnd(this.state.fromIndex, this.state.toIndex);\n        }\n      }\n\n      this.hideDragLine();\n      this.setState({\n        fromIndex: -1,\n        toIndex: -1\n      });\n    }\n  }, {\n    key: 'getDragNode',\n    value: function getDragNode(target) {\n      return closest(target, this.props.nodeSelector, this.dragList);\n    }\n  }, {\n    key: 'getHandleNode',\n    value: function getHandleNode(target) {\n      return closest(target, this.props.handleSelector || this.props.nodeSelector, this.dragList);\n    }\n  }, {\n    key: 'getDragLine',\n    value: function getDragLine() {\n      if (!this.dragLine) {\n        this.dragLine = window.document.createElement('div');\n        this.dragLine.setAttribute('style', DRAG_LIND_STYLE);\n        window.document.body.appendChild(this.dragLine);\n      }\n\n      this.dragLine.className = this.props.lineClassName || '';\n      return this.dragLine;\n    }\n  }, {\n    key: 'resolveAutoScroll',\n    value: function resolveAutoScroll(e, target) {\n      if (!this.scrollElement) {\n        return;\n      }\n\n      var _scrollElement$getBou = this.scrollElement.getBoundingClientRect(),\n          top = _scrollElement$getBou.top,\n          height = _scrollElement$getBou.height;\n\n      var targetHeight = target.offsetHeight;\n      var pageY = e.pageY;\n      var compatibleHeight = targetHeight * (2 / 3);\n      this.direction = 0;\n\n      if (pageY > top + height - compatibleHeight) {\n        this.direction = DIRECTIONS.BOTTOM;\n      } else if (pageY < top + compatibleHeight) {\n        this.direction = DIRECTIONS.TOP;\n      }\n\n      if (this.direction) {\n        if (this.scrollTimerId < 0) {\n          this.scrollTimerId = setInterval(this.autoScroll, 20);\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'stopAutoScroll',\n    value: function stopAutoScroll() {\n      clearInterval(this.scrollTimerId);\n      this.scrollTimerId = -1;\n      this.fixDragLine(this.cacheDragTarget);\n    }\n  }, {\n    key: 'autoScroll',\n    value: function autoScroll() {\n      var scrollTop = this.scrollElement.scrollTop;\n\n      if (this.direction === DIRECTIONS.BOTTOM) {\n        this.scrollElement.scrollTop = scrollTop + this.props.scrollSpeed;\n\n        if (scrollTop === this.scrollElement.scrollTop) {\n          this.stopAutoScroll();\n        }\n      } else if (this.direction === DIRECTIONS.TOP) {\n        this.scrollElement.scrollTop = scrollTop - this.props.scrollSpeed;\n\n        if (this.scrollElement.scrollTop <= 0) {\n          this.stopAutoScroll();\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'hideDragLine',\n    value: function hideDragLine() {\n      if (this.dragLine) {\n        this.dragLine.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'fixDragLine',\n    value: function fixDragLine(target) {\n      var dragLine = this.getDragLine();\n\n      if (!target || this.state.fromIndex < 0 || this.state.fromIndex === this.state.toIndex) {\n        this.hideDragLine();\n        return;\n      }\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          left = _target$getBoundingCl.left,\n          top = _target$getBoundingCl.top,\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var lineTop = this.state.toIndex < this.state.fromIndex ? top : top + height;\n\n      if (this.props.enableScroll && this.scrollElement) {\n        var _scrollElement$getBou2 = this.scrollElement.getBoundingClientRect(),\n            scrollHeight = _scrollElement$getBou2.height,\n            scrollTop = _scrollElement$getBou2.top;\n\n        if (lineTop < scrollTop - 2 || lineTop > scrollTop + scrollHeight + 2) {\n          this.hideDragLine();\n          return;\n        }\n      }\n\n      dragLine.style.left = left + UNIT_PX;\n      dragLine.style.width = width + UNIT_PX;\n      dragLine.style.top = lineTop + UNIT_PX;\n      dragLine.style.display = 'block';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement('div', {\n        role: 'presentation',\n        onMouseDown: this.onMouseDown,\n        ref: function ref(c) {\n          _this2.dragList = c;\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return ReactDragListView;\n}(Component);\n\nReactDragListView.propTypes = {\n  onDragEnd: PropTypes.func.isRequired,\n  handleSelector: PropTypes.string,\n  nodeSelector: PropTypes.string,\n  ignoreSelector: PropTypes.string,\n  enableScroll: PropTypes.bool,\n  scrollSpeed: PropTypes.number,\n  lineClassName: PropTypes.string,\n  children: PropTypes.node\n};\nReactDragListView.defaultProps = {\n  nodeSelector: DEFAULT_NODE_SELECTOR,\n  ignoreSelector: '',\n  enableScroll: true,\n  scrollSpeed: 10,\n  handleSelector: '',\n  lineClassName: '',\n  children: null\n};\nexport default ReactDragListView;","map":null,"metadata":{},"sourceType":"module"}